from typing import List

# dependencies for the generated Python class
{% for item in container.py_imports -%}
from ..{{ item.dep_pkg }}.{{ item.file }} import {{ item.class_name }}
{% endfor %}

# class definition for the ROS message
class {{ container.class_name }}:
    """
    ROS message: {{ container.pkg_name }}/{{ container.msg_type_name }}
    Generated by hakoniwa-ros2pdu.
    """
{% for field in container.json_data["fields"] %}
    {{ field.name }}: {{ container.get_python_type_hint(field.type) }}
{%- endfor %}

    def __init__(self):
{%- for field in container.json_data["fields"] %}
        self.{{ field.name }} = {{ container.get_python_default_value(field.type) }}
{%- endfor %}

    def __str__(self):
        return f"{{ container.class_name }}(" + ", ".join([
{%- for field in container.json_data["fields"] %}
            f"{{ field.name }}={self.{{ field.name }}}"
{%- endfor %}
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
{%- for field in container.json_data["fields"] %}
        # handle field '{{ field.name }}'
        field_val = self.{{ field.name }}
        if isinstance(field_val, bytearray):
            d['{{ field.name }}'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['{{ field.name }}'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['{{ field.name }}'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['{{ field.name }}'] = field_val
{%- endfor %}
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
{%- for field in container.json_data["fields"] %}
        # handle field '{{ field.name }}'
        if '{{ field.name }}' in d:
            field_type = cls.__annotations__.get('{{ field.name }}')
            value = d['{{ field.name }}']
            
            if field_type is bytearray:
                obj.{{ field.name }} = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.{{ field.name }} = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.{{ field.name }} = value
            elif hasattr(field_type, 'from_dict'):
                obj.{{ field.name }} = field_type.from_dict(value)
            else:
                obj.{{ field.name }} = value
{%- endfor %}
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))