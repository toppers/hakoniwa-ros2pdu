{% for item in container.js_imports -%}
import { {{ item.class_name }} } from '../{{ item.dep_pkg }}/{{ item.file }}.js';
{% endfor %}

/**
 * ROS message: {{ container.pkg_name }}/{{ container.msg_type_name }}
 * Generated by hakoniwa-ros2pdu.
 */
export class {{ container.class_name }} {
{% for field in container.json_data["fields"] -%}
    /** @type { {{ container.get_js_type_hint(field.type) }} } */
    {{ field.name }};
{% endfor %}

    constructor() {
{%- for field in container.json_data["fields"] %}
        this.{{ field.name }} = {{ container.get_js_default_value(field.type) }};
{%- endfor %}
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
{%- for field in container.json_data["fields"] %}
        {
            // handle field '{{ field.name }}'
            const field_val = this.{{ field.name }};
            if (typeof field_val?.toDict === 'function') {
                d['{{ field.name }}'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['{{ field.name }}'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['{{ field.name }}'] = field_val;
            }
        }
{%- endfor %}
        return d;
    }

    /**
     * @param {object} d
     * @returns { {{ container.class_name }} }
     */
    static fromDict(d) {
        const obj = new {{ container.class_name }}();
{%- for field in container.json_data["fields"] %}
        if (d.hasOwnProperty('{{ field.name }}')) {
    {%- if not container.is_primitive(field.type) and not container.is_string(field.type) %}
        {%- if container.is_array(field.type) %}
            const item_class = {{ container.get_js_class_name(container.get_array_type(field.type)) }};
            if (Array.isArray(d.{{ field.name }})) {
                obj.{{ field.name }} = d.{{ field.name }}.map(item => item_class.fromDict(item));
            }
        {%- else %}
            const field_class = {{ container.get_js_class_name(field.type) }};
            if (d.{{ field.name }}) {
                obj.{{ field.name }} = field_class.fromDict(d.{{ field.name }});
            }
        {%- endif %}
    {%- else %}
            obj.{{ field.name }} = d.{{ field.name }};
    {%- endif %}
        }
{%- endfor %}
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { {{ container.class_name }} }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
