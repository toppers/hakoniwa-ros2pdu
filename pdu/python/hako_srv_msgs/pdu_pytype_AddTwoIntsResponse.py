from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class AddTwoIntsResponse:
    """
    ROS message: hako_srv_msgs/AddTwoIntsResponse
    Generated by hakoniwa-ros2pdu.
    """

    sum: int

    def __init__(self):
        self.sum = 0

    def __str__(self):
        return f"AddTwoIntsResponse(" + ", ".join([
            f"sum={self.sum}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'sum'
        field_val = self.sum
        if isinstance(field_val, bytearray):
            d['sum'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['sum'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['sum'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['sum'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'sum'
        if 'sum' in d:
            field_type = cls.__annotations__.get('sum')
            value = d['sum']
            
            if field_type is bytearray:
                obj.sum = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.sum = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.sum = value
            elif hasattr(field_type, 'from_dict'):
                obj.sum = field_type.from_dict(value)
            else:
                obj.sum = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
