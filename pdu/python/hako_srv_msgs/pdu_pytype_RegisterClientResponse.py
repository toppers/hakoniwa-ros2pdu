from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class RegisterClientResponse:
    """
    ROS message: hako_srv_msgs/RegisterClientResponse
    Generated by hakoniwa-ros2pdu.
    """

    service_id: int
    client_id: int
    request_channel_id: int
    response_channel_id: int

    def __init__(self):
        self.service_id = 0
        self.client_id = 0
        self.request_channel_id = 0
        self.response_channel_id = 0

    def __str__(self):
        return f"RegisterClientResponse(" + ", ".join([
            f"service_id={self.service_id}"
            f"client_id={self.client_id}"
            f"request_channel_id={self.request_channel_id}"
            f"response_channel_id={self.response_channel_id}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'service_id'
        field_val = self.service_id
        if isinstance(field_val, bytearray):
            d['service_id'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['service_id'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['service_id'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['service_id'] = field_val
        # handle field 'client_id'
        field_val = self.client_id
        if isinstance(field_val, bytearray):
            d['client_id'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['client_id'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['client_id'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['client_id'] = field_val
        # handle field 'request_channel_id'
        field_val = self.request_channel_id
        if isinstance(field_val, bytearray):
            d['request_channel_id'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['request_channel_id'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['request_channel_id'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['request_channel_id'] = field_val
        # handle field 'response_channel_id'
        field_val = self.response_channel_id
        if isinstance(field_val, bytearray):
            d['response_channel_id'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['response_channel_id'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['response_channel_id'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['response_channel_id'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'service_id'
        if 'service_id' in d:
            field_type = cls.__annotations__.get('service_id')
            value = d['service_id']
            
            if field_type is bytearray:
                obj.service_id = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.service_id = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.service_id = value
            elif hasattr(field_type, 'from_dict'):
                obj.service_id = field_type.from_dict(value)
            else:
                obj.service_id = value
        # handle field 'client_id'
        if 'client_id' in d:
            field_type = cls.__annotations__.get('client_id')
            value = d['client_id']
            
            if field_type is bytearray:
                obj.client_id = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.client_id = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.client_id = value
            elif hasattr(field_type, 'from_dict'):
                obj.client_id = field_type.from_dict(value)
            else:
                obj.client_id = value
        # handle field 'request_channel_id'
        if 'request_channel_id' in d:
            field_type = cls.__annotations__.get('request_channel_id')
            value = d['request_channel_id']
            
            if field_type is bytearray:
                obj.request_channel_id = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.request_channel_id = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.request_channel_id = value
            elif hasattr(field_type, 'from_dict'):
                obj.request_channel_id = field_type.from_dict(value)
            else:
                obj.request_channel_id = value
        # handle field 'response_channel_id'
        if 'response_channel_id' in d:
            field_type = cls.__annotations__.get('response_channel_id')
            value = d['response_channel_id']
            
            if field_type is bytearray:
                obj.response_channel_id = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.response_channel_id = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.response_channel_id = value
            elif hasattr(field_type, 'from_dict'):
                obj.response_channel_id = field_type.from_dict(value)
            else:
                obj.response_channel_id = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
