from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class Ev3PduColorSensor:
    """
    ROS message: ev3_msgs/Ev3PduColorSensor
    Generated by hakoniwa-ros2pdu.
    """

    color: int
    reflect: int
    rgb_r: int
    rgb_g: int
    rgb_b: int

    def __init__(self):
        self.color = 0
        self.reflect = 0
        self.rgb_r = 0
        self.rgb_g = 0
        self.rgb_b = 0

    def __str__(self):
        return f"Ev3PduColorSensor(" + ", ".join([
            f"color={self.color}"
            f"reflect={self.reflect}"
            f"rgb_r={self.rgb_r}"
            f"rgb_g={self.rgb_g}"
            f"rgb_b={self.rgb_b}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'color'
        field_val = self.color
        if isinstance(field_val, bytearray):
            d['color'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['color'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['color'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['color'] = field_val
        # handle field 'reflect'
        field_val = self.reflect
        if isinstance(field_val, bytearray):
            d['reflect'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['reflect'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['reflect'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['reflect'] = field_val
        # handle field 'rgb_r'
        field_val = self.rgb_r
        if isinstance(field_val, bytearray):
            d['rgb_r'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['rgb_r'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['rgb_r'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['rgb_r'] = field_val
        # handle field 'rgb_g'
        field_val = self.rgb_g
        if isinstance(field_val, bytearray):
            d['rgb_g'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['rgb_g'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['rgb_g'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['rgb_g'] = field_val
        # handle field 'rgb_b'
        field_val = self.rgb_b
        if isinstance(field_val, bytearray):
            d['rgb_b'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['rgb_b'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['rgb_b'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['rgb_b'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'color'
        if 'color' in d:
            field_type = cls.__annotations__.get('color')
            value = d['color']
            
            if field_type is bytearray:
                obj.color = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.color = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.color = value
            elif hasattr(field_type, 'from_dict'):
                obj.color = field_type.from_dict(value)
            else:
                obj.color = value
        # handle field 'reflect'
        if 'reflect' in d:
            field_type = cls.__annotations__.get('reflect')
            value = d['reflect']
            
            if field_type is bytearray:
                obj.reflect = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.reflect = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.reflect = value
            elif hasattr(field_type, 'from_dict'):
                obj.reflect = field_type.from_dict(value)
            else:
                obj.reflect = value
        # handle field 'rgb_r'
        if 'rgb_r' in d:
            field_type = cls.__annotations__.get('rgb_r')
            value = d['rgb_r']
            
            if field_type is bytearray:
                obj.rgb_r = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.rgb_r = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.rgb_r = value
            elif hasattr(field_type, 'from_dict'):
                obj.rgb_r = field_type.from_dict(value)
            else:
                obj.rgb_r = value
        # handle field 'rgb_g'
        if 'rgb_g' in d:
            field_type = cls.__annotations__.get('rgb_g')
            value = d['rgb_g']
            
            if field_type is bytearray:
                obj.rgb_g = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.rgb_g = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.rgb_g = value
            elif hasattr(field_type, 'from_dict'):
                obj.rgb_g = field_type.from_dict(value)
            else:
                obj.rgb_g = value
        # handle field 'rgb_b'
        if 'rgb_b' in d:
            field_type = cls.__annotations__.get('rgb_b')
            value = d['rgb_b']
            
            if field_type is bytearray:
                obj.rgb_b = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.rgb_b = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.rgb_b = value
            elif hasattr(field_type, 'from_dict'):
                obj.rgb_b = field_type.from_dict(value)
            else:
                obj.rgb_b = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
