from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class Ev3PduSensorHeader:
    """
    ROS message: ev3_msgs/Ev3PduSensorHeader
    Generated by hakoniwa-ros2pdu.
    """

    name: str
    version: int
    hakoniwa_time: int
    ext_off: int
    ext_size: int

    def __init__(self):
        self.name = ""
        self.version = 0
        self.hakoniwa_time = 0
        self.ext_off = 0
        self.ext_size = 0

    def __str__(self):
        return f"Ev3PduSensorHeader(" + ", ".join([
            f"name={self.name}"
            f"version={self.version}"
            f"hakoniwa_time={self.hakoniwa_time}"
            f"ext_off={self.ext_off}"
            f"ext_size={self.ext_size}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'name'
        field_val = self.name
        if isinstance(field_val, bytearray):
            d['name'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['name'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['name'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['name'] = field_val
        # handle field 'version'
        field_val = self.version
        if isinstance(field_val, bytearray):
            d['version'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['version'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['version'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['version'] = field_val
        # handle field 'hakoniwa_time'
        field_val = self.hakoniwa_time
        if isinstance(field_val, bytearray):
            d['hakoniwa_time'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['hakoniwa_time'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['hakoniwa_time'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['hakoniwa_time'] = field_val
        # handle field 'ext_off'
        field_val = self.ext_off
        if isinstance(field_val, bytearray):
            d['ext_off'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['ext_off'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['ext_off'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['ext_off'] = field_val
        # handle field 'ext_size'
        field_val = self.ext_size
        if isinstance(field_val, bytearray):
            d['ext_size'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['ext_size'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['ext_size'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['ext_size'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'name'
        if 'name' in d:
            field_type = cls.__annotations__.get('name')
            value = d['name']
            
            if field_type is bytearray:
                obj.name = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.name = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.name = value
            elif hasattr(field_type, 'from_dict'):
                obj.name = field_type.from_dict(value)
            else:
                obj.name = value
        # handle field 'version'
        if 'version' in d:
            field_type = cls.__annotations__.get('version')
            value = d['version']
            
            if field_type is bytearray:
                obj.version = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.version = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.version = value
            elif hasattr(field_type, 'from_dict'):
                obj.version = field_type.from_dict(value)
            else:
                obj.version = value
        # handle field 'hakoniwa_time'
        if 'hakoniwa_time' in d:
            field_type = cls.__annotations__.get('hakoniwa_time')
            value = d['hakoniwa_time']
            
            if field_type is bytearray:
                obj.hakoniwa_time = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.hakoniwa_time = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.hakoniwa_time = value
            elif hasattr(field_type, 'from_dict'):
                obj.hakoniwa_time = field_type.from_dict(value)
            else:
                obj.hakoniwa_time = value
        # handle field 'ext_off'
        if 'ext_off' in d:
            field_type = cls.__annotations__.get('ext_off')
            value = d['ext_off']
            
            if field_type is bytearray:
                obj.ext_off = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.ext_off = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.ext_off = value
            elif hasattr(field_type, 'from_dict'):
                obj.ext_off = field_type.from_dict(value)
            else:
                obj.ext_off = value
        # handle field 'ext_size'
        if 'ext_size' in d:
            field_type = cls.__annotations__.get('ext_size')
            value = d['ext_size']
            
            if field_type is bytearray:
                obj.ext_size = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.ext_size = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.ext_size = value
            elif hasattr(field_type, 'from_dict'):
                obj.ext_size = field_type.from_dict(value)
            else:
                obj.ext_size = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
