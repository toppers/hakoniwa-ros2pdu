from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class RegionOfInterest:
    """
    ROS message: sensor_msgs/RegionOfInterest
    Generated by hakoniwa-ros2pdu.
    """

    x_offset: int
    y_offset: int
    height: int
    width: int
    do_rectify: bool

    def __init__(self):
        self.x_offset = 0
        self.y_offset = 0
        self.height = 0
        self.width = 0
        self.do_rectify = False

    def __str__(self):
        return f"RegionOfInterest(" + ", ".join([
            f"x_offset={self.x_offset}"
            f"y_offset={self.y_offset}"
            f"height={self.height}"
            f"width={self.width}"
            f"do_rectify={self.do_rectify}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'x_offset'
        field_val = self.x_offset
        if isinstance(field_val, bytearray):
            d['x_offset'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['x_offset'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['x_offset'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['x_offset'] = field_val
        # handle field 'y_offset'
        field_val = self.y_offset
        if isinstance(field_val, bytearray):
            d['y_offset'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['y_offset'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['y_offset'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['y_offset'] = field_val
        # handle field 'height'
        field_val = self.height
        if isinstance(field_val, bytearray):
            d['height'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['height'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['height'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['height'] = field_val
        # handle field 'width'
        field_val = self.width
        if isinstance(field_val, bytearray):
            d['width'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['width'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['width'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['width'] = field_val
        # handle field 'do_rectify'
        field_val = self.do_rectify
        if isinstance(field_val, bytearray):
            d['do_rectify'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['do_rectify'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['do_rectify'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['do_rectify'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'x_offset'
        if 'x_offset' in d:
            field_type = cls.__annotations__.get('x_offset')
            value = d['x_offset']
            
            if field_type is bytearray:
                obj.x_offset = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.x_offset = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.x_offset = value
            elif hasattr(field_type, 'from_dict'):
                obj.x_offset = field_type.from_dict(value)
            else:
                obj.x_offset = value
        # handle field 'y_offset'
        if 'y_offset' in d:
            field_type = cls.__annotations__.get('y_offset')
            value = d['y_offset']
            
            if field_type is bytearray:
                obj.y_offset = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.y_offset = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.y_offset = value
            elif hasattr(field_type, 'from_dict'):
                obj.y_offset = field_type.from_dict(value)
            else:
                obj.y_offset = value
        # handle field 'height'
        if 'height' in d:
            field_type = cls.__annotations__.get('height')
            value = d['height']
            
            if field_type is bytearray:
                obj.height = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.height = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.height = value
            elif hasattr(field_type, 'from_dict'):
                obj.height = field_type.from_dict(value)
            else:
                obj.height = value
        # handle field 'width'
        if 'width' in d:
            field_type = cls.__annotations__.get('width')
            value = d['width']
            
            if field_type is bytearray:
                obj.width = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.width = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.width = value
            elif hasattr(field_type, 'from_dict'):
                obj.width = field_type.from_dict(value)
            else:
                obj.width = value
        # handle field 'do_rectify'
        if 'do_rectify' in d:
            field_type = cls.__annotations__.get('do_rectify')
            value = d['do_rectify']
            
            if field_type is bytearray:
                obj.do_rectify = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.do_rectify = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.do_rectify = value
            elif hasattr(field_type, 'from_dict'):
                obj.do_rectify = field_type.from_dict(value)
            else:
                obj.do_rectify = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
