from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class HakoCanHead:
    """
    ROS message: can_msgs/HakoCanHead
    Generated by hakoniwa-ros2pdu.
    """

    channel: int
    ide: int
    rtr: int
    dlc: int
    canid: int

    def __init__(self):
        self.channel = 0
        self.ide = 0
        self.rtr = 0
        self.dlc = 0
        self.canid = 0

    def __str__(self):
        return f"HakoCanHead(" + ", ".join([
            f"channel={self.channel}"
            f"ide={self.ide}"
            f"rtr={self.rtr}"
            f"dlc={self.dlc}"
            f"canid={self.canid}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'channel'
        field_val = self.channel
        if isinstance(field_val, bytearray):
            d['channel'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['channel'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['channel'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['channel'] = field_val
        # handle field 'ide'
        field_val = self.ide
        if isinstance(field_val, bytearray):
            d['ide'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['ide'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['ide'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['ide'] = field_val
        # handle field 'rtr'
        field_val = self.rtr
        if isinstance(field_val, bytearray):
            d['rtr'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['rtr'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['rtr'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['rtr'] = field_val
        # handle field 'dlc'
        field_val = self.dlc
        if isinstance(field_val, bytearray):
            d['dlc'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['dlc'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['dlc'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['dlc'] = field_val
        # handle field 'canid'
        field_val = self.canid
        if isinstance(field_val, bytearray):
            d['canid'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['canid'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['canid'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['canid'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'channel'
        if 'channel' in d:
            field_type = cls.__annotations__.get('channel')
            value = d['channel']
            
            if field_type is bytearray:
                obj.channel = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.channel = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.channel = value
            elif hasattr(field_type, 'from_dict'):
                obj.channel = field_type.from_dict(value)
            else:
                obj.channel = value
        # handle field 'ide'
        if 'ide' in d:
            field_type = cls.__annotations__.get('ide')
            value = d['ide']
            
            if field_type is bytearray:
                obj.ide = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.ide = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.ide = value
            elif hasattr(field_type, 'from_dict'):
                obj.ide = field_type.from_dict(value)
            else:
                obj.ide = value
        # handle field 'rtr'
        if 'rtr' in d:
            field_type = cls.__annotations__.get('rtr')
            value = d['rtr']
            
            if field_type is bytearray:
                obj.rtr = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.rtr = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.rtr = value
            elif hasattr(field_type, 'from_dict'):
                obj.rtr = field_type.from_dict(value)
            else:
                obj.rtr = value
        # handle field 'dlc'
        if 'dlc' in d:
            field_type = cls.__annotations__.get('dlc')
            value = d['dlc']
            
            if field_type is bytearray:
                obj.dlc = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.dlc = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.dlc = value
            elif hasattr(field_type, 'from_dict'):
                obj.dlc = field_type.from_dict(value)
            else:
                obj.dlc = value
        # handle field 'canid'
        if 'canid' in d:
            field_type = cls.__annotations__.get('canid')
            value = d['canid']
            
            if field_type is bytearray:
                obj.canid = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.canid = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.canid = value
            elif hasattr(field_type, 'from_dict'):
                obj.canid = field_type.from_dict(value)
            else:
                obj.canid = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
