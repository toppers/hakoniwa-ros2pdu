from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class MetaPdu:
    """
    ROS message: hako_msgs/MetaPdu
    Generated by hakoniwa-ros2pdu.
    """

    total_len: int
    magicno: int
    version: int
    flags: int
    meta_request_type: int
    hako_time_us: int
    asset_time_us: int
    real_time_us: int
    robot_name: str
    channel_id: int
    body_len: int

    def __init__(self):
        self.total_len = 0
        self.magicno = 0
        self.version = 0
        self.flags = 0
        self.meta_request_type = 0
        self.hako_time_us = 0
        self.asset_time_us = 0
        self.real_time_us = 0
        self.robot_name = ""
        self.channel_id = 0
        self.body_len = 0

    def __str__(self):
        return f"MetaPdu(" + ", ".join([
            f"total_len={self.total_len}"
            f"magicno={self.magicno}"
            f"version={self.version}"
            f"flags={self.flags}"
            f"meta_request_type={self.meta_request_type}"
            f"hako_time_us={self.hako_time_us}"
            f"asset_time_us={self.asset_time_us}"
            f"real_time_us={self.real_time_us}"
            f"robot_name={self.robot_name}"
            f"channel_id={self.channel_id}"
            f"body_len={self.body_len}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'total_len'
        field_val = self.total_len
        if isinstance(field_val, bytearray):
            d['total_len'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['total_len'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['total_len'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['total_len'] = field_val
        # handle field 'magicno'
        field_val = self.magicno
        if isinstance(field_val, bytearray):
            d['magicno'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['magicno'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['magicno'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['magicno'] = field_val
        # handle field 'version'
        field_val = self.version
        if isinstance(field_val, bytearray):
            d['version'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['version'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['version'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['version'] = field_val
        # handle field 'flags'
        field_val = self.flags
        if isinstance(field_val, bytearray):
            d['flags'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['flags'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['flags'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['flags'] = field_val
        # handle field 'meta_request_type'
        field_val = self.meta_request_type
        if isinstance(field_val, bytearray):
            d['meta_request_type'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['meta_request_type'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['meta_request_type'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['meta_request_type'] = field_val
        # handle field 'hako_time_us'
        field_val = self.hako_time_us
        if isinstance(field_val, bytearray):
            d['hako_time_us'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['hako_time_us'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['hako_time_us'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['hako_time_us'] = field_val
        # handle field 'asset_time_us'
        field_val = self.asset_time_us
        if isinstance(field_val, bytearray):
            d['asset_time_us'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['asset_time_us'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['asset_time_us'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['asset_time_us'] = field_val
        # handle field 'real_time_us'
        field_val = self.real_time_us
        if isinstance(field_val, bytearray):
            d['real_time_us'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['real_time_us'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['real_time_us'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['real_time_us'] = field_val
        # handle field 'robot_name'
        field_val = self.robot_name
        if isinstance(field_val, bytearray):
            d['robot_name'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['robot_name'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['robot_name'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['robot_name'] = field_val
        # handle field 'channel_id'
        field_val = self.channel_id
        if isinstance(field_val, bytearray):
            d['channel_id'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['channel_id'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['channel_id'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['channel_id'] = field_val
        # handle field 'body_len'
        field_val = self.body_len
        if isinstance(field_val, bytearray):
            d['body_len'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['body_len'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['body_len'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['body_len'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'total_len'
        if 'total_len' in d:
            field_type = cls.__annotations__.get('total_len')
            value = d['total_len']
            
            if field_type is bytearray:
                obj.total_len = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.total_len = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.total_len = value
            elif hasattr(field_type, 'from_dict'):
                obj.total_len = field_type.from_dict(value)
            else:
                obj.total_len = value
        # handle field 'magicno'
        if 'magicno' in d:
            field_type = cls.__annotations__.get('magicno')
            value = d['magicno']
            
            if field_type is bytearray:
                obj.magicno = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.magicno = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.magicno = value
            elif hasattr(field_type, 'from_dict'):
                obj.magicno = field_type.from_dict(value)
            else:
                obj.magicno = value
        # handle field 'version'
        if 'version' in d:
            field_type = cls.__annotations__.get('version')
            value = d['version']
            
            if field_type is bytearray:
                obj.version = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.version = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.version = value
            elif hasattr(field_type, 'from_dict'):
                obj.version = field_type.from_dict(value)
            else:
                obj.version = value
        # handle field 'flags'
        if 'flags' in d:
            field_type = cls.__annotations__.get('flags')
            value = d['flags']
            
            if field_type is bytearray:
                obj.flags = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.flags = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.flags = value
            elif hasattr(field_type, 'from_dict'):
                obj.flags = field_type.from_dict(value)
            else:
                obj.flags = value
        # handle field 'meta_request_type'
        if 'meta_request_type' in d:
            field_type = cls.__annotations__.get('meta_request_type')
            value = d['meta_request_type']
            
            if field_type is bytearray:
                obj.meta_request_type = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.meta_request_type = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.meta_request_type = value
            elif hasattr(field_type, 'from_dict'):
                obj.meta_request_type = field_type.from_dict(value)
            else:
                obj.meta_request_type = value
        # handle field 'hako_time_us'
        if 'hako_time_us' in d:
            field_type = cls.__annotations__.get('hako_time_us')
            value = d['hako_time_us']
            
            if field_type is bytearray:
                obj.hako_time_us = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.hako_time_us = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.hako_time_us = value
            elif hasattr(field_type, 'from_dict'):
                obj.hako_time_us = field_type.from_dict(value)
            else:
                obj.hako_time_us = value
        # handle field 'asset_time_us'
        if 'asset_time_us' in d:
            field_type = cls.__annotations__.get('asset_time_us')
            value = d['asset_time_us']
            
            if field_type is bytearray:
                obj.asset_time_us = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.asset_time_us = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.asset_time_us = value
            elif hasattr(field_type, 'from_dict'):
                obj.asset_time_us = field_type.from_dict(value)
            else:
                obj.asset_time_us = value
        # handle field 'real_time_us'
        if 'real_time_us' in d:
            field_type = cls.__annotations__.get('real_time_us')
            value = d['real_time_us']
            
            if field_type is bytearray:
                obj.real_time_us = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.real_time_us = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.real_time_us = value
            elif hasattr(field_type, 'from_dict'):
                obj.real_time_us = field_type.from_dict(value)
            else:
                obj.real_time_us = value
        # handle field 'robot_name'
        if 'robot_name' in d:
            field_type = cls.__annotations__.get('robot_name')
            value = d['robot_name']
            
            if field_type is bytearray:
                obj.robot_name = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.robot_name = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.robot_name = value
            elif hasattr(field_type, 'from_dict'):
                obj.robot_name = field_type.from_dict(value)
            else:
                obj.robot_name = value
        # handle field 'channel_id'
        if 'channel_id' in d:
            field_type = cls.__annotations__.get('channel_id')
            value = d['channel_id']
            
            if field_type is bytearray:
                obj.channel_id = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.channel_id = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.channel_id = value
            elif hasattr(field_type, 'from_dict'):
                obj.channel_id = field_type.from_dict(value)
            else:
                obj.channel_id = value
        # handle field 'body_len'
        if 'body_len' in d:
            field_type = cls.__annotations__.get('body_len')
            value = d['body_len']
            
            if field_type is bytearray:
                obj.body_len = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.body_len = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.body_len = value
            elif hasattr(field_type, 'from_dict'):
                obj.body_len = field_type.from_dict(value)
            else:
                obj.body_len = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
