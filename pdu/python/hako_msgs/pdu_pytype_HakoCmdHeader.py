from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class HakoCmdHeader:
    """
    ROS message: hako_msgs/HakoCmdHeader
    Generated by hakoniwa-ros2pdu.
    """

    request: bool
    result: bool
    result_code: int

    def __init__(self):
        self.request = False
        self.result = False
        self.result_code = 0

    def __str__(self):
        return f"HakoCmdHeader(" + ", ".join([
            f"request={self.request}"
            f"result={self.result}"
            f"result_code={self.result_code}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'request'
        field_val = self.request
        if isinstance(field_val, bytearray):
            d['request'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['request'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['request'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['request'] = field_val
        # handle field 'result'
        field_val = self.result
        if isinstance(field_val, bytearray):
            d['result'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['result'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['result'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['result'] = field_val
        # handle field 'result_code'
        field_val = self.result_code
        if isinstance(field_val, bytearray):
            d['result_code'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['result_code'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['result_code'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['result_code'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'request'
        if 'request' in d:
            field_type = cls.__annotations__.get('request')
            value = d['request']
            
            if field_type is bytearray:
                obj.request = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.request = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.request = value
            elif hasattr(field_type, 'from_dict'):
                obj.request = field_type.from_dict(value)
            else:
                obj.request = value
        # handle field 'result'
        if 'result' in d:
            field_type = cls.__annotations__.get('result')
            value = d['result']
            
            if field_type is bytearray:
                obj.result = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.result = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.result = value
            elif hasattr(field_type, 'from_dict'):
                obj.result = field_type.from_dict(value)
            else:
                obj.result = value
        # handle field 'result_code'
        if 'result_code' in d:
            field_type = cls.__annotations__.get('result_code')
            value = d['result_code']
            
            if field_type is bytearray:
                obj.result_code = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.result_code = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.result_code = value
            elif hasattr(field_type, 'from_dict'):
                obj.result_code = field_type.from_dict(value)
            else:
                obj.result_code = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
