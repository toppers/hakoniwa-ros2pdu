from typing import List

# dependencies for the generated Python class
from ..hako_msgs.pdu_pytype_HakoDroneCmdHeader import HakoDroneCmdHeader


# class definition for the ROS message
class HakoDroneCmdTakeoff:
    """
    ROS message: hako_msgs/HakoDroneCmdTakeoff
    Generated by hakoniwa-ros2pdu.
    """

    header: HakoDroneCmdHeader
    height: float
    speed: float
    yaw_deg: float

    def __init__(self):
        self.header = HakoDroneCmdHeader()
        self.height = 0.0
        self.speed = 0.0
        self.yaw_deg = 0.0

    def __str__(self):
        return f"HakoDroneCmdTakeoff(" + ", ".join([
            f"header={self.header}"
            f"height={self.height}"
            f"speed={self.speed}"
            f"yaw_deg={self.yaw_deg}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'header'
        field_val = self.header
        if isinstance(field_val, bytearray):
            d['header'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['header'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['header'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['header'] = field_val
        # handle field 'height'
        field_val = self.height
        if isinstance(field_val, bytearray):
            d['height'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['height'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['height'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['height'] = field_val
        # handle field 'speed'
        field_val = self.speed
        if isinstance(field_val, bytearray):
            d['speed'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['speed'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['speed'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['speed'] = field_val
        # handle field 'yaw_deg'
        field_val = self.yaw_deg
        if isinstance(field_val, bytearray):
            d['yaw_deg'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['yaw_deg'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['yaw_deg'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['yaw_deg'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'header'
        if 'header' in d:
            field_type = cls.__annotations__.get('header')
            value = d['header']
            
            if field_type is bytearray:
                obj.header = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.header = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.header = value
            elif hasattr(field_type, 'from_dict'):
                obj.header = field_type.from_dict(value)
            else:
                obj.header = value
        # handle field 'height'
        if 'height' in d:
            field_type = cls.__annotations__.get('height')
            value = d['height']
            
            if field_type is bytearray:
                obj.height = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.height = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.height = value
            elif hasattr(field_type, 'from_dict'):
                obj.height = field_type.from_dict(value)
            else:
                obj.height = value
        # handle field 'speed'
        if 'speed' in d:
            field_type = cls.__annotations__.get('speed')
            value = d['speed']
            
            if field_type is bytearray:
                obj.speed = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.speed = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.speed = value
            elif hasattr(field_type, 'from_dict'):
                obj.speed = field_type.from_dict(value)
            else:
                obj.speed = value
        # handle field 'yaw_deg'
        if 'yaw_deg' in d:
            field_type = cls.__annotations__.get('yaw_deg')
            value = d['yaw_deg']
            
            if field_type is bytearray:
                obj.yaw_deg = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.yaw_deg = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.yaw_deg = value
            elif hasattr(field_type, 'from_dict'):
                obj.yaw_deg = field_type.from_dict(value)
            else:
                obj.yaw_deg = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
