from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class HakoHeartbeat:
    """
    ROS message: hako_mavlink_msgs/HakoHeartbeat
    Generated by hakoniwa-ros2pdu.
    """

    type: int
    autopilot: int
    base_mode: int
    custom_mode: int
    system_status: int
    mavlink_version: int

    def __init__(self):
        self.type = 0
        self.autopilot = 0
        self.base_mode = 0
        self.custom_mode = 0
        self.system_status = 0
        self.mavlink_version = 0

    def __str__(self):
        return f"HakoHeartbeat(" + ", ".join([
            f"type={self.type}"
            f"autopilot={self.autopilot}"
            f"base_mode={self.base_mode}"
            f"custom_mode={self.custom_mode}"
            f"system_status={self.system_status}"
            f"mavlink_version={self.mavlink_version}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'type'
        field_val = self.type
        if isinstance(field_val, bytearray):
            d['type'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['type'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['type'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['type'] = field_val
        # handle field 'autopilot'
        field_val = self.autopilot
        if isinstance(field_val, bytearray):
            d['autopilot'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['autopilot'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['autopilot'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['autopilot'] = field_val
        # handle field 'base_mode'
        field_val = self.base_mode
        if isinstance(field_val, bytearray):
            d['base_mode'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['base_mode'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['base_mode'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['base_mode'] = field_val
        # handle field 'custom_mode'
        field_val = self.custom_mode
        if isinstance(field_val, bytearray):
            d['custom_mode'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['custom_mode'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['custom_mode'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['custom_mode'] = field_val
        # handle field 'system_status'
        field_val = self.system_status
        if isinstance(field_val, bytearray):
            d['system_status'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['system_status'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['system_status'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['system_status'] = field_val
        # handle field 'mavlink_version'
        field_val = self.mavlink_version
        if isinstance(field_val, bytearray):
            d['mavlink_version'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['mavlink_version'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['mavlink_version'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['mavlink_version'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'type'
        if 'type' in d:
            field_type = cls.__annotations__.get('type')
            value = d['type']
            
            if field_type is bytearray:
                obj.type = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.type = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.type = value
            elif hasattr(field_type, 'from_dict'):
                obj.type = field_type.from_dict(value)
            else:
                obj.type = value
        # handle field 'autopilot'
        if 'autopilot' in d:
            field_type = cls.__annotations__.get('autopilot')
            value = d['autopilot']
            
            if field_type is bytearray:
                obj.autopilot = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.autopilot = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.autopilot = value
            elif hasattr(field_type, 'from_dict'):
                obj.autopilot = field_type.from_dict(value)
            else:
                obj.autopilot = value
        # handle field 'base_mode'
        if 'base_mode' in d:
            field_type = cls.__annotations__.get('base_mode')
            value = d['base_mode']
            
            if field_type is bytearray:
                obj.base_mode = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.base_mode = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.base_mode = value
            elif hasattr(field_type, 'from_dict'):
                obj.base_mode = field_type.from_dict(value)
            else:
                obj.base_mode = value
        # handle field 'custom_mode'
        if 'custom_mode' in d:
            field_type = cls.__annotations__.get('custom_mode')
            value = d['custom_mode']
            
            if field_type is bytearray:
                obj.custom_mode = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.custom_mode = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.custom_mode = value
            elif hasattr(field_type, 'from_dict'):
                obj.custom_mode = field_type.from_dict(value)
            else:
                obj.custom_mode = value
        # handle field 'system_status'
        if 'system_status' in d:
            field_type = cls.__annotations__.get('system_status')
            value = d['system_status']
            
            if field_type is bytearray:
                obj.system_status = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.system_status = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.system_status = value
            elif hasattr(field_type, 'from_dict'):
                obj.system_status = field_type.from_dict(value)
            else:
                obj.system_status = value
        # handle field 'mavlink_version'
        if 'mavlink_version' in d:
            field_type = cls.__annotations__.get('mavlink_version')
            value = d['mavlink_version']
            
            if field_type is bytearray:
                obj.mavlink_version = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.mavlink_version = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.mavlink_version = value
            elif hasattr(field_type, 'from_dict'):
                obj.mavlink_version = field_type.from_dict(value)
            else:
                obj.mavlink_version = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
