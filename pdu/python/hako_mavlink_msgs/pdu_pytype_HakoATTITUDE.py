from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class HakoATTITUDE:
    """
    ROS message: hako_mavlink_msgs/HakoATTITUDE
    Generated by hakoniwa-ros2pdu.
    """

    time_boot_ms: int
    roll: float
    pitch: float
    yaw: float
    rollspeed: float
    pitchspeed: float
    yawspeed: float

    def __init__(self):
        self.time_boot_ms = 0
        self.roll = 0.0
        self.pitch = 0.0
        self.yaw = 0.0
        self.rollspeed = 0.0
        self.pitchspeed = 0.0
        self.yawspeed = 0.0

    def __str__(self):
        return f"HakoATTITUDE(" + ", ".join([
            f"time_boot_ms={self.time_boot_ms}"
            f"roll={self.roll}"
            f"pitch={self.pitch}"
            f"yaw={self.yaw}"
            f"rollspeed={self.rollspeed}"
            f"pitchspeed={self.pitchspeed}"
            f"yawspeed={self.yawspeed}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'time_boot_ms'
        field_val = self.time_boot_ms
        if isinstance(field_val, bytearray):
            d['time_boot_ms'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['time_boot_ms'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['time_boot_ms'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['time_boot_ms'] = field_val
        # handle field 'roll'
        field_val = self.roll
        if isinstance(field_val, bytearray):
            d['roll'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['roll'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['roll'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['roll'] = field_val
        # handle field 'pitch'
        field_val = self.pitch
        if isinstance(field_val, bytearray):
            d['pitch'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['pitch'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['pitch'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['pitch'] = field_val
        # handle field 'yaw'
        field_val = self.yaw
        if isinstance(field_val, bytearray):
            d['yaw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['yaw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['yaw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['yaw'] = field_val
        # handle field 'rollspeed'
        field_val = self.rollspeed
        if isinstance(field_val, bytearray):
            d['rollspeed'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['rollspeed'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['rollspeed'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['rollspeed'] = field_val
        # handle field 'pitchspeed'
        field_val = self.pitchspeed
        if isinstance(field_val, bytearray):
            d['pitchspeed'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['pitchspeed'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['pitchspeed'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['pitchspeed'] = field_val
        # handle field 'yawspeed'
        field_val = self.yawspeed
        if isinstance(field_val, bytearray):
            d['yawspeed'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['yawspeed'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['yawspeed'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['yawspeed'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'time_boot_ms'
        if 'time_boot_ms' in d:
            field_type = cls.__annotations__.get('time_boot_ms')
            value = d['time_boot_ms']
            
            if field_type is bytearray:
                obj.time_boot_ms = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.time_boot_ms = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.time_boot_ms = value
            elif hasattr(field_type, 'from_dict'):
                obj.time_boot_ms = field_type.from_dict(value)
            else:
                obj.time_boot_ms = value
        # handle field 'roll'
        if 'roll' in d:
            field_type = cls.__annotations__.get('roll')
            value = d['roll']
            
            if field_type is bytearray:
                obj.roll = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.roll = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.roll = value
            elif hasattr(field_type, 'from_dict'):
                obj.roll = field_type.from_dict(value)
            else:
                obj.roll = value
        # handle field 'pitch'
        if 'pitch' in d:
            field_type = cls.__annotations__.get('pitch')
            value = d['pitch']
            
            if field_type is bytearray:
                obj.pitch = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.pitch = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.pitch = value
            elif hasattr(field_type, 'from_dict'):
                obj.pitch = field_type.from_dict(value)
            else:
                obj.pitch = value
        # handle field 'yaw'
        if 'yaw' in d:
            field_type = cls.__annotations__.get('yaw')
            value = d['yaw']
            
            if field_type is bytearray:
                obj.yaw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.yaw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.yaw = value
            elif hasattr(field_type, 'from_dict'):
                obj.yaw = field_type.from_dict(value)
            else:
                obj.yaw = value
        # handle field 'rollspeed'
        if 'rollspeed' in d:
            field_type = cls.__annotations__.get('rollspeed')
            value = d['rollspeed']
            
            if field_type is bytearray:
                obj.rollspeed = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.rollspeed = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.rollspeed = value
            elif hasattr(field_type, 'from_dict'):
                obj.rollspeed = field_type.from_dict(value)
            else:
                obj.rollspeed = value
        # handle field 'pitchspeed'
        if 'pitchspeed' in d:
            field_type = cls.__annotations__.get('pitchspeed')
            value = d['pitchspeed']
            
            if field_type is bytearray:
                obj.pitchspeed = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.pitchspeed = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.pitchspeed = value
            elif hasattr(field_type, 'from_dict'):
                obj.pitchspeed = field_type.from_dict(value)
            else:
                obj.pitchspeed = value
        # handle field 'yawspeed'
        if 'yawspeed' in d:
            field_type = cls.__annotations__.get('yawspeed')
            value = d['yawspeed']
            
            if field_type is bytearray:
                obj.yawspeed = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.yawspeed = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.yawspeed = value
            elif hasattr(field_type, 'from_dict'):
                obj.yawspeed = field_type.from_dict(value)
            else:
                obj.yawspeed = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
