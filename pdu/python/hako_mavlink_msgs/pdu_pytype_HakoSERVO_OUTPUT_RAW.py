from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class HakoSERVO_OUTPUT_RAW:
    """
    ROS message: hako_mavlink_msgs/HakoSERVO_OUTPUT_RAW
    Generated by hakoniwa-ros2pdu.
    """

    time_usec: int
    port: int
    servo1_raw: int
    servo2_raw: int
    servo3_raw: int
    servo4_raw: int
    servo5_raw: int
    servo6_raw: int
    servo7_raw: int
    servo8_raw: int

    def __init__(self):
        self.time_usec = 0
        self.port = 0
        self.servo1_raw = 0
        self.servo2_raw = 0
        self.servo3_raw = 0
        self.servo4_raw = 0
        self.servo5_raw = 0
        self.servo6_raw = 0
        self.servo7_raw = 0
        self.servo8_raw = 0

    def __str__(self):
        return f"HakoSERVO_OUTPUT_RAW(" + ", ".join([
            f"time_usec={self.time_usec}"
            f"port={self.port}"
            f"servo1_raw={self.servo1_raw}"
            f"servo2_raw={self.servo2_raw}"
            f"servo3_raw={self.servo3_raw}"
            f"servo4_raw={self.servo4_raw}"
            f"servo5_raw={self.servo5_raw}"
            f"servo6_raw={self.servo6_raw}"
            f"servo7_raw={self.servo7_raw}"
            f"servo8_raw={self.servo8_raw}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'time_usec'
        field_val = self.time_usec
        if isinstance(field_val, bytearray):
            d['time_usec'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['time_usec'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['time_usec'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['time_usec'] = field_val
        # handle field 'port'
        field_val = self.port
        if isinstance(field_val, bytearray):
            d['port'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['port'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['port'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['port'] = field_val
        # handle field 'servo1_raw'
        field_val = self.servo1_raw
        if isinstance(field_val, bytearray):
            d['servo1_raw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['servo1_raw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['servo1_raw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['servo1_raw'] = field_val
        # handle field 'servo2_raw'
        field_val = self.servo2_raw
        if isinstance(field_val, bytearray):
            d['servo2_raw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['servo2_raw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['servo2_raw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['servo2_raw'] = field_val
        # handle field 'servo3_raw'
        field_val = self.servo3_raw
        if isinstance(field_val, bytearray):
            d['servo3_raw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['servo3_raw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['servo3_raw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['servo3_raw'] = field_val
        # handle field 'servo4_raw'
        field_val = self.servo4_raw
        if isinstance(field_val, bytearray):
            d['servo4_raw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['servo4_raw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['servo4_raw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['servo4_raw'] = field_val
        # handle field 'servo5_raw'
        field_val = self.servo5_raw
        if isinstance(field_val, bytearray):
            d['servo5_raw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['servo5_raw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['servo5_raw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['servo5_raw'] = field_val
        # handle field 'servo6_raw'
        field_val = self.servo6_raw
        if isinstance(field_val, bytearray):
            d['servo6_raw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['servo6_raw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['servo6_raw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['servo6_raw'] = field_val
        # handle field 'servo7_raw'
        field_val = self.servo7_raw
        if isinstance(field_val, bytearray):
            d['servo7_raw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['servo7_raw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['servo7_raw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['servo7_raw'] = field_val
        # handle field 'servo8_raw'
        field_val = self.servo8_raw
        if isinstance(field_val, bytearray):
            d['servo8_raw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['servo8_raw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['servo8_raw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['servo8_raw'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'time_usec'
        if 'time_usec' in d:
            field_type = cls.__annotations__.get('time_usec')
            value = d['time_usec']
            
            if field_type is bytearray:
                obj.time_usec = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.time_usec = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.time_usec = value
            elif hasattr(field_type, 'from_dict'):
                obj.time_usec = field_type.from_dict(value)
            else:
                obj.time_usec = value
        # handle field 'port'
        if 'port' in d:
            field_type = cls.__annotations__.get('port')
            value = d['port']
            
            if field_type is bytearray:
                obj.port = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.port = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.port = value
            elif hasattr(field_type, 'from_dict'):
                obj.port = field_type.from_dict(value)
            else:
                obj.port = value
        # handle field 'servo1_raw'
        if 'servo1_raw' in d:
            field_type = cls.__annotations__.get('servo1_raw')
            value = d['servo1_raw']
            
            if field_type is bytearray:
                obj.servo1_raw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.servo1_raw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.servo1_raw = value
            elif hasattr(field_type, 'from_dict'):
                obj.servo1_raw = field_type.from_dict(value)
            else:
                obj.servo1_raw = value
        # handle field 'servo2_raw'
        if 'servo2_raw' in d:
            field_type = cls.__annotations__.get('servo2_raw')
            value = d['servo2_raw']
            
            if field_type is bytearray:
                obj.servo2_raw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.servo2_raw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.servo2_raw = value
            elif hasattr(field_type, 'from_dict'):
                obj.servo2_raw = field_type.from_dict(value)
            else:
                obj.servo2_raw = value
        # handle field 'servo3_raw'
        if 'servo3_raw' in d:
            field_type = cls.__annotations__.get('servo3_raw')
            value = d['servo3_raw']
            
            if field_type is bytearray:
                obj.servo3_raw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.servo3_raw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.servo3_raw = value
            elif hasattr(field_type, 'from_dict'):
                obj.servo3_raw = field_type.from_dict(value)
            else:
                obj.servo3_raw = value
        # handle field 'servo4_raw'
        if 'servo4_raw' in d:
            field_type = cls.__annotations__.get('servo4_raw')
            value = d['servo4_raw']
            
            if field_type is bytearray:
                obj.servo4_raw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.servo4_raw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.servo4_raw = value
            elif hasattr(field_type, 'from_dict'):
                obj.servo4_raw = field_type.from_dict(value)
            else:
                obj.servo4_raw = value
        # handle field 'servo5_raw'
        if 'servo5_raw' in d:
            field_type = cls.__annotations__.get('servo5_raw')
            value = d['servo5_raw']
            
            if field_type is bytearray:
                obj.servo5_raw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.servo5_raw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.servo5_raw = value
            elif hasattr(field_type, 'from_dict'):
                obj.servo5_raw = field_type.from_dict(value)
            else:
                obj.servo5_raw = value
        # handle field 'servo6_raw'
        if 'servo6_raw' in d:
            field_type = cls.__annotations__.get('servo6_raw')
            value = d['servo6_raw']
            
            if field_type is bytearray:
                obj.servo6_raw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.servo6_raw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.servo6_raw = value
            elif hasattr(field_type, 'from_dict'):
                obj.servo6_raw = field_type.from_dict(value)
            else:
                obj.servo6_raw = value
        # handle field 'servo7_raw'
        if 'servo7_raw' in d:
            field_type = cls.__annotations__.get('servo7_raw')
            value = d['servo7_raw']
            
            if field_type is bytearray:
                obj.servo7_raw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.servo7_raw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.servo7_raw = value
            elif hasattr(field_type, 'from_dict'):
                obj.servo7_raw = field_type.from_dict(value)
            else:
                obj.servo7_raw = value
        # handle field 'servo8_raw'
        if 'servo8_raw' in d:
            field_type = cls.__annotations__.get('servo8_raw')
            value = d['servo8_raw']
            
            if field_type is bytearray:
                obj.servo8_raw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.servo8_raw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.servo8_raw = value
            elif hasattr(field_type, 'from_dict'):
                obj.servo8_raw = field_type.from_dict(value)
            else:
                obj.servo8_raw = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
