from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class HakoHilGps:
    """
    ROS message: hako_mavlink_msgs/HakoHilGps
    Generated by hakoniwa-ros2pdu.
    """

    time_usec: int
    lat: int
    lon: int
    alt: int
    eph: int
    epv: int
    vel: int
    vn: int
    ve: int
    vd: int
    cog: int
    satellites_visible: int
    id: int
    yaw: int
    fix_type: int

    def __init__(self):
        self.time_usec = 0
        self.lat = 0
        self.lon = 0
        self.alt = 0
        self.eph = 0
        self.epv = 0
        self.vel = 0
        self.vn = 0
        self.ve = 0
        self.vd = 0
        self.cog = 0
        self.satellites_visible = 0
        self.id = 0
        self.yaw = 0
        self.fix_type = 0

    def __str__(self):
        return f"HakoHilGps(" + ", ".join([
            f"time_usec={self.time_usec}"
            f"lat={self.lat}"
            f"lon={self.lon}"
            f"alt={self.alt}"
            f"eph={self.eph}"
            f"epv={self.epv}"
            f"vel={self.vel}"
            f"vn={self.vn}"
            f"ve={self.ve}"
            f"vd={self.vd}"
            f"cog={self.cog}"
            f"satellites_visible={self.satellites_visible}"
            f"id={self.id}"
            f"yaw={self.yaw}"
            f"fix_type={self.fix_type}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'time_usec'
        field_val = self.time_usec
        if isinstance(field_val, bytearray):
            d['time_usec'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['time_usec'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['time_usec'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['time_usec'] = field_val
        # handle field 'lat'
        field_val = self.lat
        if isinstance(field_val, bytearray):
            d['lat'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['lat'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['lat'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['lat'] = field_val
        # handle field 'lon'
        field_val = self.lon
        if isinstance(field_val, bytearray):
            d['lon'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['lon'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['lon'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['lon'] = field_val
        # handle field 'alt'
        field_val = self.alt
        if isinstance(field_val, bytearray):
            d['alt'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['alt'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['alt'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['alt'] = field_val
        # handle field 'eph'
        field_val = self.eph
        if isinstance(field_val, bytearray):
            d['eph'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['eph'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['eph'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['eph'] = field_val
        # handle field 'epv'
        field_val = self.epv
        if isinstance(field_val, bytearray):
            d['epv'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['epv'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['epv'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['epv'] = field_val
        # handle field 'vel'
        field_val = self.vel
        if isinstance(field_val, bytearray):
            d['vel'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['vel'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['vel'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['vel'] = field_val
        # handle field 'vn'
        field_val = self.vn
        if isinstance(field_val, bytearray):
            d['vn'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['vn'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['vn'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['vn'] = field_val
        # handle field 've'
        field_val = self.ve
        if isinstance(field_val, bytearray):
            d['ve'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['ve'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['ve'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['ve'] = field_val
        # handle field 'vd'
        field_val = self.vd
        if isinstance(field_val, bytearray):
            d['vd'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['vd'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['vd'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['vd'] = field_val
        # handle field 'cog'
        field_val = self.cog
        if isinstance(field_val, bytearray):
            d['cog'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['cog'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['cog'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['cog'] = field_val
        # handle field 'satellites_visible'
        field_val = self.satellites_visible
        if isinstance(field_val, bytearray):
            d['satellites_visible'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['satellites_visible'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['satellites_visible'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['satellites_visible'] = field_val
        # handle field 'id'
        field_val = self.id
        if isinstance(field_val, bytearray):
            d['id'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['id'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['id'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['id'] = field_val
        # handle field 'yaw'
        field_val = self.yaw
        if isinstance(field_val, bytearray):
            d['yaw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['yaw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['yaw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['yaw'] = field_val
        # handle field 'fix_type'
        field_val = self.fix_type
        if isinstance(field_val, bytearray):
            d['fix_type'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['fix_type'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['fix_type'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['fix_type'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'time_usec'
        if 'time_usec' in d:
            field_type = cls.__annotations__.get('time_usec')
            value = d['time_usec']
            
            if field_type is bytearray:
                obj.time_usec = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.time_usec = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.time_usec = value
            elif hasattr(field_type, 'from_dict'):
                obj.time_usec = field_type.from_dict(value)
            else:
                obj.time_usec = value
        # handle field 'lat'
        if 'lat' in d:
            field_type = cls.__annotations__.get('lat')
            value = d['lat']
            
            if field_type is bytearray:
                obj.lat = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.lat = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.lat = value
            elif hasattr(field_type, 'from_dict'):
                obj.lat = field_type.from_dict(value)
            else:
                obj.lat = value
        # handle field 'lon'
        if 'lon' in d:
            field_type = cls.__annotations__.get('lon')
            value = d['lon']
            
            if field_type is bytearray:
                obj.lon = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.lon = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.lon = value
            elif hasattr(field_type, 'from_dict'):
                obj.lon = field_type.from_dict(value)
            else:
                obj.lon = value
        # handle field 'alt'
        if 'alt' in d:
            field_type = cls.__annotations__.get('alt')
            value = d['alt']
            
            if field_type is bytearray:
                obj.alt = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.alt = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.alt = value
            elif hasattr(field_type, 'from_dict'):
                obj.alt = field_type.from_dict(value)
            else:
                obj.alt = value
        # handle field 'eph'
        if 'eph' in d:
            field_type = cls.__annotations__.get('eph')
            value = d['eph']
            
            if field_type is bytearray:
                obj.eph = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.eph = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.eph = value
            elif hasattr(field_type, 'from_dict'):
                obj.eph = field_type.from_dict(value)
            else:
                obj.eph = value
        # handle field 'epv'
        if 'epv' in d:
            field_type = cls.__annotations__.get('epv')
            value = d['epv']
            
            if field_type is bytearray:
                obj.epv = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.epv = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.epv = value
            elif hasattr(field_type, 'from_dict'):
                obj.epv = field_type.from_dict(value)
            else:
                obj.epv = value
        # handle field 'vel'
        if 'vel' in d:
            field_type = cls.__annotations__.get('vel')
            value = d['vel']
            
            if field_type is bytearray:
                obj.vel = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.vel = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.vel = value
            elif hasattr(field_type, 'from_dict'):
                obj.vel = field_type.from_dict(value)
            else:
                obj.vel = value
        # handle field 'vn'
        if 'vn' in d:
            field_type = cls.__annotations__.get('vn')
            value = d['vn']
            
            if field_type is bytearray:
                obj.vn = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.vn = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.vn = value
            elif hasattr(field_type, 'from_dict'):
                obj.vn = field_type.from_dict(value)
            else:
                obj.vn = value
        # handle field 've'
        if 've' in d:
            field_type = cls.__annotations__.get('ve')
            value = d['ve']
            
            if field_type is bytearray:
                obj.ve = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.ve = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.ve = value
            elif hasattr(field_type, 'from_dict'):
                obj.ve = field_type.from_dict(value)
            else:
                obj.ve = value
        # handle field 'vd'
        if 'vd' in d:
            field_type = cls.__annotations__.get('vd')
            value = d['vd']
            
            if field_type is bytearray:
                obj.vd = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.vd = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.vd = value
            elif hasattr(field_type, 'from_dict'):
                obj.vd = field_type.from_dict(value)
            else:
                obj.vd = value
        # handle field 'cog'
        if 'cog' in d:
            field_type = cls.__annotations__.get('cog')
            value = d['cog']
            
            if field_type is bytearray:
                obj.cog = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.cog = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.cog = value
            elif hasattr(field_type, 'from_dict'):
                obj.cog = field_type.from_dict(value)
            else:
                obj.cog = value
        # handle field 'satellites_visible'
        if 'satellites_visible' in d:
            field_type = cls.__annotations__.get('satellites_visible')
            value = d['satellites_visible']
            
            if field_type is bytearray:
                obj.satellites_visible = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.satellites_visible = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.satellites_visible = value
            elif hasattr(field_type, 'from_dict'):
                obj.satellites_visible = field_type.from_dict(value)
            else:
                obj.satellites_visible = value
        # handle field 'id'
        if 'id' in d:
            field_type = cls.__annotations__.get('id')
            value = d['id']
            
            if field_type is bytearray:
                obj.id = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.id = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.id = value
            elif hasattr(field_type, 'from_dict'):
                obj.id = field_type.from_dict(value)
            else:
                obj.id = value
        # handle field 'yaw'
        if 'yaw' in d:
            field_type = cls.__annotations__.get('yaw')
            value = d['yaw']
            
            if field_type is bytearray:
                obj.yaw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.yaw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.yaw = value
            elif hasattr(field_type, 'from_dict'):
                obj.yaw = field_type.from_dict(value)
            else:
                obj.yaw = value
        # handle field 'fix_type'
        if 'fix_type' in d:
            field_type = cls.__annotations__.get('fix_type')
            value = d['fix_type']
            
            if field_type is bytearray:
                obj.fix_type = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.fix_type = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.fix_type = value
            elif hasattr(field_type, 'from_dict'):
                obj.fix_type = field_type.from_dict(value)
            else:
                obj.fix_type = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
