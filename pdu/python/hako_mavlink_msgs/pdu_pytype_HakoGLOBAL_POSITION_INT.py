from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class HakoGLOBAL_POSITION_INT:
    """
    ROS message: hako_mavlink_msgs/HakoGLOBAL_POSITION_INT
    Generated by hakoniwa-ros2pdu.
    """

    time_boot_ms: int
    lat: int
    lon: int
    alt: int
    relative_alt: int
    vx: int
    vy: int
    vz: int
    hdg: int

    def __init__(self):
        self.time_boot_ms = 0
        self.lat = 0
        self.lon = 0
        self.alt = 0
        self.relative_alt = 0
        self.vx = 0
        self.vy = 0
        self.vz = 0
        self.hdg = 0

    def __str__(self):
        return f"HakoGLOBAL_POSITION_INT(" + ", ".join([
            f"time_boot_ms={self.time_boot_ms}"
            f"lat={self.lat}"
            f"lon={self.lon}"
            f"alt={self.alt}"
            f"relative_alt={self.relative_alt}"
            f"vx={self.vx}"
            f"vy={self.vy}"
            f"vz={self.vz}"
            f"hdg={self.hdg}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'time_boot_ms'
        field_val = self.time_boot_ms
        if isinstance(field_val, bytearray):
            d['time_boot_ms'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['time_boot_ms'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['time_boot_ms'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['time_boot_ms'] = field_val
        # handle field 'lat'
        field_val = self.lat
        if isinstance(field_val, bytearray):
            d['lat'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['lat'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['lat'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['lat'] = field_val
        # handle field 'lon'
        field_val = self.lon
        if isinstance(field_val, bytearray):
            d['lon'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['lon'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['lon'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['lon'] = field_val
        # handle field 'alt'
        field_val = self.alt
        if isinstance(field_val, bytearray):
            d['alt'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['alt'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['alt'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['alt'] = field_val
        # handle field 'relative_alt'
        field_val = self.relative_alt
        if isinstance(field_val, bytearray):
            d['relative_alt'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['relative_alt'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['relative_alt'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['relative_alt'] = field_val
        # handle field 'vx'
        field_val = self.vx
        if isinstance(field_val, bytearray):
            d['vx'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['vx'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['vx'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['vx'] = field_val
        # handle field 'vy'
        field_val = self.vy
        if isinstance(field_val, bytearray):
            d['vy'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['vy'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['vy'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['vy'] = field_val
        # handle field 'vz'
        field_val = self.vz
        if isinstance(field_val, bytearray):
            d['vz'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['vz'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['vz'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['vz'] = field_val
        # handle field 'hdg'
        field_val = self.hdg
        if isinstance(field_val, bytearray):
            d['hdg'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['hdg'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['hdg'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['hdg'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'time_boot_ms'
        if 'time_boot_ms' in d:
            field_type = cls.__annotations__.get('time_boot_ms')
            value = d['time_boot_ms']
            
            if field_type is bytearray:
                obj.time_boot_ms = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.time_boot_ms = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.time_boot_ms = value
            elif hasattr(field_type, 'from_dict'):
                obj.time_boot_ms = field_type.from_dict(value)
            else:
                obj.time_boot_ms = value
        # handle field 'lat'
        if 'lat' in d:
            field_type = cls.__annotations__.get('lat')
            value = d['lat']
            
            if field_type is bytearray:
                obj.lat = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.lat = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.lat = value
            elif hasattr(field_type, 'from_dict'):
                obj.lat = field_type.from_dict(value)
            else:
                obj.lat = value
        # handle field 'lon'
        if 'lon' in d:
            field_type = cls.__annotations__.get('lon')
            value = d['lon']
            
            if field_type is bytearray:
                obj.lon = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.lon = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.lon = value
            elif hasattr(field_type, 'from_dict'):
                obj.lon = field_type.from_dict(value)
            else:
                obj.lon = value
        # handle field 'alt'
        if 'alt' in d:
            field_type = cls.__annotations__.get('alt')
            value = d['alt']
            
            if field_type is bytearray:
                obj.alt = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.alt = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.alt = value
            elif hasattr(field_type, 'from_dict'):
                obj.alt = field_type.from_dict(value)
            else:
                obj.alt = value
        # handle field 'relative_alt'
        if 'relative_alt' in d:
            field_type = cls.__annotations__.get('relative_alt')
            value = d['relative_alt']
            
            if field_type is bytearray:
                obj.relative_alt = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.relative_alt = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.relative_alt = value
            elif hasattr(field_type, 'from_dict'):
                obj.relative_alt = field_type.from_dict(value)
            else:
                obj.relative_alt = value
        # handle field 'vx'
        if 'vx' in d:
            field_type = cls.__annotations__.get('vx')
            value = d['vx']
            
            if field_type is bytearray:
                obj.vx = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.vx = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.vx = value
            elif hasattr(field_type, 'from_dict'):
                obj.vx = field_type.from_dict(value)
            else:
                obj.vx = value
        # handle field 'vy'
        if 'vy' in d:
            field_type = cls.__annotations__.get('vy')
            value = d['vy']
            
            if field_type is bytearray:
                obj.vy = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.vy = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.vy = value
            elif hasattr(field_type, 'from_dict'):
                obj.vy = field_type.from_dict(value)
            else:
                obj.vy = value
        # handle field 'vz'
        if 'vz' in d:
            field_type = cls.__annotations__.get('vz')
            value = d['vz']
            
            if field_type is bytearray:
                obj.vz = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.vz = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.vz = value
            elif hasattr(field_type, 'from_dict'):
                obj.vz = field_type.from_dict(value)
            else:
                obj.vz = value
        # handle field 'hdg'
        if 'hdg' in d:
            field_type = cls.__annotations__.get('hdg')
            value = d['hdg']
            
            if field_type is bytearray:
                obj.hdg = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.hdg = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.hdg = value
            elif hasattr(field_type, 'from_dict'):
                obj.hdg = field_type.from_dict(value)
            else:
                obj.hdg = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
