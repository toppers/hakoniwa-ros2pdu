from typing import List

# dependencies for the generated Python class


# class definition for the ROS message
class HakoAHRS2:
    """
    ROS message: hako_mavlink_msgs/HakoAHRS2
    Generated by hakoniwa-ros2pdu.
    """

    roll: float
    pitch: float
    yaw: float
    altitude: float
    lat: int
    lng: int

    def __init__(self):
        self.roll = 0.0
        self.pitch = 0.0
        self.yaw = 0.0
        self.altitude = 0.0
        self.lat = 0
        self.lng = 0

    def __str__(self):
        return f"HakoAHRS2(" + ", ".join([
            f"roll={self.roll}"
            f"pitch={self.pitch}"
            f"yaw={self.yaw}"
            f"altitude={self.altitude}"
            f"lat={self.lat}"
            f"lng={self.lng}"
        ]) + ")"

    def __repr__(self):
        return self.__str__()

    def to_dict(self):
        """
        Convert the object to a dictionary.
        """
        d = {}
        # handle field 'roll'
        field_val = self.roll
        if isinstance(field_val, bytearray):
            d['roll'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['roll'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['roll'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['roll'] = field_val
        # handle field 'pitch'
        field_val = self.pitch
        if isinstance(field_val, bytearray):
            d['pitch'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['pitch'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['pitch'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['pitch'] = field_val
        # handle field 'yaw'
        field_val = self.yaw
        if isinstance(field_val, bytearray):
            d['yaw'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['yaw'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['yaw'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['yaw'] = field_val
        # handle field 'altitude'
        field_val = self.altitude
        if isinstance(field_val, bytearray):
            d['altitude'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['altitude'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['altitude'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['altitude'] = field_val
        # handle field 'lat'
        field_val = self.lat
        if isinstance(field_val, bytearray):
            d['lat'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['lat'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['lat'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['lat'] = field_val
        # handle field 'lng'
        field_val = self.lng
        if isinstance(field_val, bytearray):
            d['lng'] = list(field_val)
        elif hasattr(field_val, 'to_dict'):
            d['lng'] = field_val.to_dict()
        elif isinstance(field_val, list):
            d['lng'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in field_val]
        else:
            d['lng'] = field_val
        return d

    @classmethod
    def from_dict(cls, d: dict):
        """
        Create an object from a dictionary.
        """
        obj = cls()
        # handle field 'roll'
        if 'roll' in d:
            field_type = cls.__annotations__.get('roll')
            value = d['roll']
            
            if field_type is bytearray:
                obj.roll = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.roll = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.roll = value
            elif hasattr(field_type, 'from_dict'):
                obj.roll = field_type.from_dict(value)
            else:
                obj.roll = value
        # handle field 'pitch'
        if 'pitch' in d:
            field_type = cls.__annotations__.get('pitch')
            value = d['pitch']
            
            if field_type is bytearray:
                obj.pitch = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.pitch = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.pitch = value
            elif hasattr(field_type, 'from_dict'):
                obj.pitch = field_type.from_dict(value)
            else:
                obj.pitch = value
        # handle field 'yaw'
        if 'yaw' in d:
            field_type = cls.__annotations__.get('yaw')
            value = d['yaw']
            
            if field_type is bytearray:
                obj.yaw = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.yaw = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.yaw = value
            elif hasattr(field_type, 'from_dict'):
                obj.yaw = field_type.from_dict(value)
            else:
                obj.yaw = value
        # handle field 'altitude'
        if 'altitude' in d:
            field_type = cls.__annotations__.get('altitude')
            value = d['altitude']
            
            if field_type is bytearray:
                obj.altitude = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.altitude = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.altitude = value
            elif hasattr(field_type, 'from_dict'):
                obj.altitude = field_type.from_dict(value)
            else:
                obj.altitude = value
        # handle field 'lat'
        if 'lat' in d:
            field_type = cls.__annotations__.get('lat')
            value = d['lat']
            
            if field_type is bytearray:
                obj.lat = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.lat = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.lat = value
            elif hasattr(field_type, 'from_dict'):
                obj.lat = field_type.from_dict(value)
            else:
                obj.lat = value
        # handle field 'lng'
        if 'lng' in d:
            field_type = cls.__annotations__.get('lng')
            value = d['lng']
            
            if field_type is bytearray:
                obj.lng = bytearray(value)
            elif hasattr(field_type, '__origin__') and field_type.__origin__ is list:
                list_item_type = field_type.__args__[0]
                if hasattr(list_item_type, 'from_dict'):
                    obj.lng = [list_item_type.from_dict(item) for item in value]
                else:
                    obj.lng = value
            elif hasattr(field_type, 'from_dict'):
                obj.lng = field_type.from_dict(value)
            else:
                obj.lng = value
        return obj

    def to_json(self, indent=2):
        """
        Convert the object to a JSON string.
        """
        import json
        return json.dumps(self.to_dict(), indent=indent)

    @classmethod
    def from_json(cls, json_str: str):
        """
        Create an object from a JSON string.
        """
        import json
        return cls.from_dict(json.loads(json_str))
