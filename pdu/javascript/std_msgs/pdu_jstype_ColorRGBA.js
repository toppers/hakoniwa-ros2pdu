

/**
 * ROS message: std_msgs/ColorRGBA
 * Generated by hakoniwa-ros2pdu.
 */
export class ColorRGBA {
/** @type { number } */
    r;
/** @type { number } */
    g;
/** @type { number } */
    b;
/** @type { number } */
    a;


    constructor() {
        this.r = 0.0;
        this.g = 0.0;
        this.b = 0.0;
        this.a = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'r'
            const field_val = this.r;
            if (typeof field_val?.toDict === 'function') {
                d['r'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['r'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['r'] = field_val;
            }
        }
        {
            // handle field 'g'
            const field_val = this.g;
            if (typeof field_val?.toDict === 'function') {
                d['g'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['g'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['g'] = field_val;
            }
        }
        {
            // handle field 'b'
            const field_val = this.b;
            if (typeof field_val?.toDict === 'function') {
                d['b'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['b'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['b'] = field_val;
            }
        }
        {
            // handle field 'a'
            const field_val = this.a;
            if (typeof field_val?.toDict === 'function') {
                d['a'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['a'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['a'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { ColorRGBA }
     */
    static fromDict(d) {
        const obj = new ColorRGBA();
        if (d.hasOwnProperty('r')) {
            obj.r = d.r;
        }
        if (d.hasOwnProperty('g')) {
            obj.g = d.g;
        }
        if (d.hasOwnProperty('b')) {
            obj.b = d.b;
        }
        if (d.hasOwnProperty('a')) {
            obj.a = d.a;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { ColorRGBA }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
