

/**
 * ROS message: geometry_msgs/Quaternion
 * Generated by hakoniwa-ros2pdu.
 */
export class Quaternion {
/** @type { number } */
    x;
/** @type { number } */
    y;
/** @type { number } */
    z;
/** @type { number } */
    w;


    constructor() {
        this.x = 0.0;
        this.y = 0.0;
        this.z = 0.0;
        this.w = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'x'
            const field_val = this.x;
            if (typeof field_val?.toDict === 'function') {
                d['x'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['x'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['x'] = field_val;
            }
        }
        {
            // handle field 'y'
            const field_val = this.y;
            if (typeof field_val?.toDict === 'function') {
                d['y'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['y'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['y'] = field_val;
            }
        }
        {
            // handle field 'z'
            const field_val = this.z;
            if (typeof field_val?.toDict === 'function') {
                d['z'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['z'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['z'] = field_val;
            }
        }
        {
            // handle field 'w'
            const field_val = this.w;
            if (typeof field_val?.toDict === 'function') {
                d['w'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['w'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['w'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Quaternion }
     */
    static fromDict(d) {
        const obj = new Quaternion();
        if (d.hasOwnProperty('x')) {
            obj.x = d.x;
        }
        if (d.hasOwnProperty('y')) {
            obj.y = d.y;
        }
        if (d.hasOwnProperty('z')) {
            obj.z = d.z;
        }
        if (d.hasOwnProperty('w')) {
            obj.w = d.w;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Quaternion }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
