import { Quaternion } from '../geometry_msgs/pdu_jstype_Quaternion.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: geometry_msgs/Transform
 * Generated by hakoniwa-ros2pdu.
 */
export class Transform {
/** @type { Vector3 } */
    translation;
/** @type { Quaternion } */
    rotation;


    constructor() {
        this.translation = null;
        this.rotation = null;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'translation'
            const field_val = this.translation;
            if (typeof field_val?.toDict === 'function') {
                d['translation'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['translation'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['translation'] = field_val;
            }
        }
        {
            // handle field 'rotation'
            const field_val = this.rotation;
            if (typeof field_val?.toDict === 'function') {
                d['rotation'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['rotation'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['rotation'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Transform }
     */
    static fromDict(d) {
        const obj = new Transform();
        if (d.hasOwnProperty('translation')) {
            const field_class = Vector3;
            if (d.translation) {
                obj.translation = field_class.fromDict(d.translation);
            }
        }
        if (d.hasOwnProperty('rotation')) {
            const field_class = Quaternion;
            if (d.rotation) {
                obj.rotation = field_class.fromDict(d.rotation);
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Transform }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
