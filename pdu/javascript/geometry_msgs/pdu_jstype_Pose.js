import { Point } from '../geometry_msgs/pdu_jstype_Point.js';
import { Quaternion } from '../geometry_msgs/pdu_jstype_Quaternion.js';


/**
 * ROS message: geometry_msgs/Pose
 * Generated by hakoniwa-ros2pdu.
 */
export class Pose {
/** @type { Point } */
    position;
/** @type { Quaternion } */
    orientation;


    constructor() {
        this.position = new Point();
        this.orientation = new Quaternion();
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'position'
            const field_val = this.position;
            if (typeof field_val?.toDict === 'function') {
                d['position'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['position'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['position'] = field_val;
            }
        }
        {
            // handle field 'orientation'
            const field_val = this.orientation;
            if (typeof field_val?.toDict === 'function') {
                d['orientation'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['orientation'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['orientation'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Pose }
     */
    static fromDict(d) {
        const obj = new Pose();
        if (d.hasOwnProperty('position')) {
            const field_class = Point;
            if (d.position) {
                obj.position = field_class.fromDict(d.position);
            }
        }
        if (d.hasOwnProperty('orientation')) {
            const field_class = Quaternion;
            if (d.orientation) {
                obj.orientation = field_class.fromDict(d.orientation);
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Pose }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
