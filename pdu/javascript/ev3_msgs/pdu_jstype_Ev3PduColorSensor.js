

/**
 * ROS message: ev3_msgs/Ev3PduColorSensor
 * Generated by hakoniwa-ros2pdu.
 */
export class Ev3PduColorSensor {
/** @type { number } */
    color;
/** @type { number } */
    reflect;
/** @type { number } */
    rgb_r;
/** @type { number } */
    rgb_g;
/** @type { number } */
    rgb_b;


    constructor() {
        this.color = 0;
        this.reflect = 0;
        this.rgb_r = 0;
        this.rgb_g = 0;
        this.rgb_b = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'color'
            const field_val = this.color;
            if (typeof field_val?.toDict === 'function') {
                d['color'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['color'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['color'] = field_val;
            }
        }
        {
            // handle field 'reflect'
            const field_val = this.reflect;
            if (typeof field_val?.toDict === 'function') {
                d['reflect'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['reflect'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['reflect'] = field_val;
            }
        }
        {
            // handle field 'rgb_r'
            const field_val = this.rgb_r;
            if (typeof field_val?.toDict === 'function') {
                d['rgb_r'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['rgb_r'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['rgb_r'] = field_val;
            }
        }
        {
            // handle field 'rgb_g'
            const field_val = this.rgb_g;
            if (typeof field_val?.toDict === 'function') {
                d['rgb_g'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['rgb_g'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['rgb_g'] = field_val;
            }
        }
        {
            // handle field 'rgb_b'
            const field_val = this.rgb_b;
            if (typeof field_val?.toDict === 'function') {
                d['rgb_b'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['rgb_b'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['rgb_b'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Ev3PduColorSensor }
     */
    static fromDict(d) {
        const obj = new Ev3PduColorSensor();
        if (d.hasOwnProperty('color')) {
            obj.color = d.color;
        }
        if (d.hasOwnProperty('reflect')) {
            obj.reflect = d.reflect;
        }
        if (d.hasOwnProperty('rgb_r')) {
            obj.rgb_r = d.rgb_r;
        }
        if (d.hasOwnProperty('rgb_g')) {
            obj.rgb_g = d.rgb_g;
        }
        if (d.hasOwnProperty('rgb_b')) {
            obj.rgb_b = d.rgb_b;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Ev3PduColorSensor }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
