import { Ev3PduActuatorHeader } from '../ev3_msgs/pdu_jstype_Ev3PduActuatorHeader.js';
import { Ev3PduMotor } from '../ev3_msgs/pdu_jstype_Ev3PduMotor.js';


/**
 * ROS message: ev3_msgs/Ev3PduActuator
 * Generated by hakoniwa-ros2pdu.
 */
export class Ev3PduActuator {
/** @type { Ev3PduActuatorHeader } */
    head;
/** @type { Array<number> } */
    leds;
/** @type { Array<Ev3PduMotor> } */
    motors;
/** @type { number } */
    gyro_reset;


    constructor() {
        this.head = new Ev3PduActuatorHeader();
        this.leds = [];
        this.motors = [];
        this.gyro_reset = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'head'
            const field_val = this.head;
            if (typeof field_val?.toDict === 'function') {
                d['head'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['head'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['head'] = field_val;
            }
        }
        {
            // handle field 'leds'
            const field_val = this.leds;
            if (typeof field_val?.toDict === 'function') {
                d['leds'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['leds'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['leds'] = field_val;
            }
        }
        {
            // handle field 'motors'
            const field_val = this.motors;
            if (typeof field_val?.toDict === 'function') {
                d['motors'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['motors'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['motors'] = field_val;
            }
        }
        {
            // handle field 'gyro_reset'
            const field_val = this.gyro_reset;
            if (typeof field_val?.toDict === 'function') {
                d['gyro_reset'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['gyro_reset'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['gyro_reset'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Ev3PduActuator }
     */
    static fromDict(d) {
        const obj = new Ev3PduActuator();
        if (d.hasOwnProperty('head')) {
            const field_class = Ev3PduActuatorHeader;
            if (d.head) {
                obj.head = field_class.fromDict(d.head);
            }
        }
        if (d.hasOwnProperty('leds')) {
            const item_class = uint8;
            if (Array.isArray(d.leds)) {
                obj.leds = d.leds.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('motors')) {
            const item_class = Ev3PduMotor;
            if (Array.isArray(d.motors)) {
                obj.motors = d.motors.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('gyro_reset')) {
            obj.gyro_reset = d.gyro_reset;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Ev3PduActuator }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
