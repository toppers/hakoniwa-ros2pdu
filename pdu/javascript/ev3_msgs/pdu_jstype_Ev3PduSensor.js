import { Ev3PduColorSensor } from '../ev3_msgs/pdu_jstype_Ev3PduColorSensor.js';
import { Ev3PduSensorHeader } from '../ev3_msgs/pdu_jstype_Ev3PduSensorHeader.js';
import { Ev3PduTouchSensor } from '../ev3_msgs/pdu_jstype_Ev3PduTouchSensor.js';


/**
 * ROS message: ev3_msgs/Ev3PduSensor
 * Generated by hakoniwa-ros2pdu.
 */
export class Ev3PduSensor {
/** @type { Ev3PduSensorHeader } */
    head;
/** @type { Array<number> } */
    buttons;
/** @type { Array<Ev3PduColorSensor> } */
    color_sensors;
/** @type { Array<Ev3PduTouchSensor> } */
    touch_sensors;
/** @type { Array<number> } */
    motor_angle;
/** @type { number } */
    gyro_degree;
/** @type { number } */
    gyro_degree_rate;
/** @type { number } */
    sensor_ultrasonic;
/** @type { number } */
    gps_lat;
/** @type { number } */
    gps_lon;


    constructor() {
        this.head = new Ev3PduSensorHeader();
        this.buttons = [];
        this.color_sensors = [];
        this.touch_sensors = [];
        this.motor_angle = [];
        this.gyro_degree = 0;
        this.gyro_degree_rate = 0;
        this.sensor_ultrasonic = 0;
        this.gps_lat = 0.0;
        this.gps_lon = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'head'
            const field_val = this.head;
            if (typeof field_val?.toDict === 'function') {
                d['head'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['head'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['head'] = field_val;
            }
        }
        {
            // handle field 'buttons'
            const field_val = this.buttons;
            if (typeof field_val?.toDict === 'function') {
                d['buttons'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['buttons'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['buttons'] = field_val;
            }
        }
        {
            // handle field 'color_sensors'
            const field_val = this.color_sensors;
            if (typeof field_val?.toDict === 'function') {
                d['color_sensors'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['color_sensors'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['color_sensors'] = field_val;
            }
        }
        {
            // handle field 'touch_sensors'
            const field_val = this.touch_sensors;
            if (typeof field_val?.toDict === 'function') {
                d['touch_sensors'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['touch_sensors'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['touch_sensors'] = field_val;
            }
        }
        {
            // handle field 'motor_angle'
            const field_val = this.motor_angle;
            if (typeof field_val?.toDict === 'function') {
                d['motor_angle'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['motor_angle'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['motor_angle'] = field_val;
            }
        }
        {
            // handle field 'gyro_degree'
            const field_val = this.gyro_degree;
            if (typeof field_val?.toDict === 'function') {
                d['gyro_degree'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['gyro_degree'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['gyro_degree'] = field_val;
            }
        }
        {
            // handle field 'gyro_degree_rate'
            const field_val = this.gyro_degree_rate;
            if (typeof field_val?.toDict === 'function') {
                d['gyro_degree_rate'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['gyro_degree_rate'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['gyro_degree_rate'] = field_val;
            }
        }
        {
            // handle field 'sensor_ultrasonic'
            const field_val = this.sensor_ultrasonic;
            if (typeof field_val?.toDict === 'function') {
                d['sensor_ultrasonic'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['sensor_ultrasonic'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['sensor_ultrasonic'] = field_val;
            }
        }
        {
            // handle field 'gps_lat'
            const field_val = this.gps_lat;
            if (typeof field_val?.toDict === 'function') {
                d['gps_lat'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['gps_lat'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['gps_lat'] = field_val;
            }
        }
        {
            // handle field 'gps_lon'
            const field_val = this.gps_lon;
            if (typeof field_val?.toDict === 'function') {
                d['gps_lon'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['gps_lon'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['gps_lon'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Ev3PduSensor }
     */
    static fromDict(d) {
        const obj = new Ev3PduSensor();
        if (d.hasOwnProperty('head')) {
            const field_class = Ev3PduSensorHeader;
            if (d.head) {
                obj.head = field_class.fromDict(d.head);
            }
        }
        if (d.hasOwnProperty('buttons')) {
            const item_class = uint8;
            if (Array.isArray(d.buttons)) {
                obj.buttons = d.buttons.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('color_sensors')) {
            const item_class = Ev3PduColorSensor;
            if (Array.isArray(d.color_sensors)) {
                obj.color_sensors = d.color_sensors.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('touch_sensors')) {
            const item_class = Ev3PduTouchSensor;
            if (Array.isArray(d.touch_sensors)) {
                obj.touch_sensors = d.touch_sensors.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('motor_angle')) {
            const item_class = uint32;
            if (Array.isArray(d.motor_angle)) {
                obj.motor_angle = d.motor_angle.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('gyro_degree')) {
            obj.gyro_degree = d.gyro_degree;
        }
        if (d.hasOwnProperty('gyro_degree_rate')) {
            obj.gyro_degree_rate = d.gyro_degree_rate;
        }
        if (d.hasOwnProperty('sensor_ultrasonic')) {
            obj.sensor_ultrasonic = d.sensor_ultrasonic;
        }
        if (d.hasOwnProperty('gps_lat')) {
            obj.gps_lat = d.gps_lat;
        }
        if (d.hasOwnProperty('gps_lon')) {
            obj.gps_lon = d.gps_lon;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Ev3PduSensor }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
