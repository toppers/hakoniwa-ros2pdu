import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: hako_msgs/DroneStatus
 * Generated by hakoniwa-ros2pdu.
 */
export class DroneStatus {
/** @type { number } */
    flight_mode;
/** @type { number } */
    internal_state;
/** @type { Vector3 } */
    propeller_wind;


    constructor() {
        this.flight_mode = 0;
        this.internal_state = 0;
        this.propeller_wind = null;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'flight_mode'
            const field_val = this.flight_mode;
            if (typeof field_val?.toDict === 'function') {
                d['flight_mode'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['flight_mode'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['flight_mode'] = field_val;
            }
        }
        {
            // handle field 'internal_state'
            const field_val = this.internal_state;
            if (typeof field_val?.toDict === 'function') {
                d['internal_state'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['internal_state'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['internal_state'] = field_val;
            }
        }
        {
            // handle field 'propeller_wind'
            const field_val = this.propeller_wind;
            if (typeof field_val?.toDict === 'function') {
                d['propeller_wind'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['propeller_wind'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['propeller_wind'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { DroneStatus }
     */
    static fromDict(d) {
        const obj = new DroneStatus();
        if (d.hasOwnProperty('flight_mode')) {
            obj.flight_mode = d.flight_mode;
        }
        if (d.hasOwnProperty('internal_state')) {
            obj.internal_state = d.internal_state;
        }
        if (d.hasOwnProperty('propeller_wind')) {
            const field_class = Vector3;
            if (d.propeller_wind) {
                obj.propeller_wind = field_class.fromDict(d.propeller_wind);
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { DroneStatus }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
