import { DisturbanceAtm } from '../hako_msgs/pdu_jstype_DisturbanceAtm.js';
import { DisturbanceBoundary } from '../hako_msgs/pdu_jstype_DisturbanceBoundary.js';
import { DisturbanceTemperature } from '../hako_msgs/pdu_jstype_DisturbanceTemperature.js';
import { DisturbanceWind } from '../hako_msgs/pdu_jstype_DisturbanceWind.js';
import { Point } from '../geometry_msgs/pdu_jstype_Point.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: hako_msgs/Disturbance
 * Generated by hakoniwa-ros2pdu.
 */
export class Disturbance {
/** @type { DisturbanceTemperature } */
    d_temp;
/** @type { DisturbanceWind } */
    d_wind;
/** @type { DisturbanceAtm } */
    d_atm;
/** @type { DisturbanceBoundary } */
    d_boundary;


    constructor() {
        this.d_temp = null;
        this.d_wind = null;
        this.d_atm = null;
        this.d_boundary = null;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'd_temp'
            const field_val = this.d_temp;
            if (typeof field_val?.toDict === 'function') {
                d['d_temp'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['d_temp'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['d_temp'] = field_val;
            }
        }
        {
            // handle field 'd_wind'
            const field_val = this.d_wind;
            if (typeof field_val?.toDict === 'function') {
                d['d_wind'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['d_wind'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['d_wind'] = field_val;
            }
        }
        {
            // handle field 'd_atm'
            const field_val = this.d_atm;
            if (typeof field_val?.toDict === 'function') {
                d['d_atm'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['d_atm'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['d_atm'] = field_val;
            }
        }
        {
            // handle field 'd_boundary'
            const field_val = this.d_boundary;
            if (typeof field_val?.toDict === 'function') {
                d['d_boundary'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['d_boundary'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['d_boundary'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Disturbance }
     */
    static fromDict(d) {
        const obj = new Disturbance();
        if (d.hasOwnProperty('d_temp')) {
            const field_class = DisturbanceTemperature;
            if (d.d_temp) {
                obj.d_temp = field_class.fromDict(d.d_temp);
            }
        }
        if (d.hasOwnProperty('d_wind')) {
            const field_class = DisturbanceWind;
            if (d.d_wind) {
                obj.d_wind = field_class.fromDict(d.d_wind);
            }
        }
        if (d.hasOwnProperty('d_atm')) {
            const field_class = DisturbanceAtm;
            if (d.d_atm) {
                obj.d_atm = field_class.fromDict(d.d_atm);
            }
        }
        if (d.hasOwnProperty('d_boundary')) {
            const field_class = DisturbanceBoundary;
            if (d.d_boundary) {
                obj.d_boundary = field_class.fromDict(d.d_boundary);
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Disturbance }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
