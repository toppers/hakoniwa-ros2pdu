

/**
 * ROS message: hako_msgs/GameControllerOperation
 * Generated by hakoniwa-ros2pdu.
 */
export class GameControllerOperation {
/** @type { Array<number> } */
    axis;
/** @type { Array<boolean> } */
    button;


    constructor() {
        this.axis = [];
        this.button = [];
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'axis'
            const field_val = this.axis;
            if (typeof field_val?.toDict === 'function') {
                d['axis'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['axis'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['axis'] = field_val;
            }
        }
        {
            // handle field 'button'
            const field_val = this.button;
            if (typeof field_val?.toDict === 'function') {
                d['button'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['button'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['button'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { GameControllerOperation }
     */
    static fromDict(d) {
        const obj = new GameControllerOperation();
        if (d.hasOwnProperty('axis')) {
            const item_class = float64;
            if (Array.isArray(d.axis)) {
                obj.axis = d.axis.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('button')) {
            const item_class = bool;
            if (Array.isArray(d.button)) {
                obj.button = d.button.map(item => item_class.fromDict(item));
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { GameControllerOperation }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
