import { HakoDroneCmdHeader } from '../hako_msgs/pdu_jstype_HakoDroneCmdHeader.js';


/**
 * ROS message: hako_msgs/HakoDroneCmdMove
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoDroneCmdMove {
/** @type { HakoDroneCmdHeader } */
    header;
/** @type { number } */
    x;
/** @type { number } */
    y;
/** @type { number } */
    z;
/** @type { number } */
    speed;
/** @type { number } */
    yaw_deg;


    constructor() {
        this.header = null;
        this.x = 0.0;
        this.y = 0.0;
        this.z = 0.0;
        this.speed = 0.0;
        this.yaw_deg = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'x'
            const field_val = this.x;
            if (typeof field_val?.toDict === 'function') {
                d['x'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['x'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['x'] = field_val;
            }
        }
        {
            // handle field 'y'
            const field_val = this.y;
            if (typeof field_val?.toDict === 'function') {
                d['y'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['y'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['y'] = field_val;
            }
        }
        {
            // handle field 'z'
            const field_val = this.z;
            if (typeof field_val?.toDict === 'function') {
                d['z'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['z'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['z'] = field_val;
            }
        }
        {
            // handle field 'speed'
            const field_val = this.speed;
            if (typeof field_val?.toDict === 'function') {
                d['speed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['speed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['speed'] = field_val;
            }
        }
        {
            // handle field 'yaw_deg'
            const field_val = this.yaw_deg;
            if (typeof field_val?.toDict === 'function') {
                d['yaw_deg'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yaw_deg'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yaw_deg'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoDroneCmdMove }
     */
    static fromDict(d) {
        const obj = new HakoDroneCmdMove();
        if (d.hasOwnProperty('header')) {
            const field_class = HakoDroneCmdHeader;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('x')) {
            obj.x = d.x;
        }
        if (d.hasOwnProperty('y')) {
            obj.y = d.y;
        }
        if (d.hasOwnProperty('z')) {
            obj.z = d.z;
        }
        if (d.hasOwnProperty('speed')) {
            obj.speed = d.speed;
        }
        if (d.hasOwnProperty('yaw_deg')) {
            obj.yaw_deg = d.yaw_deg;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoDroneCmdMove }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
