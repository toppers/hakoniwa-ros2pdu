import { Point } from '../geometry_msgs/pdu_jstype_Point.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: hako_msgs/Collision
 * Generated by hakoniwa-ros2pdu.
 */
export class Collision {
/** @type { boolean } */
    collision;
/** @type { number } */
    contact_num;
/** @type { Vector3 } */
    relative_velocity;
/** @type { Array<Point> } */
    contact_position;
/** @type { number } */
    restitution_coefficient;


    constructor() {
        this.collision = false;
        this.contact_num = 0;
        this.relative_velocity = new Vector3();
        this.contact_position = [];
        this.restitution_coefficient = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'collision'
            const field_val = this.collision;
            if (typeof field_val?.toDict === 'function') {
                d['collision'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['collision'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['collision'] = field_val;
            }
        }
        {
            // handle field 'contact_num'
            const field_val = this.contact_num;
            if (typeof field_val?.toDict === 'function') {
                d['contact_num'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['contact_num'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['contact_num'] = field_val;
            }
        }
        {
            // handle field 'relative_velocity'
            const field_val = this.relative_velocity;
            if (typeof field_val?.toDict === 'function') {
                d['relative_velocity'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['relative_velocity'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['relative_velocity'] = field_val;
            }
        }
        {
            // handle field 'contact_position'
            const field_val = this.contact_position;
            if (typeof field_val?.toDict === 'function') {
                d['contact_position'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['contact_position'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['contact_position'] = field_val;
            }
        }
        {
            // handle field 'restitution_coefficient'
            const field_val = this.restitution_coefficient;
            if (typeof field_val?.toDict === 'function') {
                d['restitution_coefficient'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['restitution_coefficient'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['restitution_coefficient'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Collision }
     */
    static fromDict(d) {
        const obj = new Collision();
        if (d.hasOwnProperty('collision')) {
            obj.collision = d.collision;
        }
        if (d.hasOwnProperty('contact_num')) {
            obj.contact_num = d.contact_num;
        }
        if (d.hasOwnProperty('relative_velocity')) {
            const field_class = Vector3;
            if (d.relative_velocity) {
                obj.relative_velocity = field_class.fromDict(d.relative_velocity);
            }
        }
        if (d.hasOwnProperty('contact_position')) {
            const item_class = Point;
            if (Array.isArray(d.contact_position)) {
                obj.contact_position = d.contact_position.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('restitution_coefficient')) {
            obj.restitution_coefficient = d.restitution_coefficient;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Collision }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
