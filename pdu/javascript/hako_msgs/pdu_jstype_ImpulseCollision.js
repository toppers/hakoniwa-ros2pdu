import { Point } from '../geometry_msgs/pdu_jstype_Point.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: hako_msgs/ImpulseCollision
 * Generated by hakoniwa-ros2pdu.
 */
export class ImpulseCollision {
/** @type { boolean } */
    collision;
/** @type { boolean } */
    is_target_static;
/** @type { number } */
    restitution_coefficient;
/** @type { Point } */
    self_contact_vector;
/** @type { Vector3 } */
    normal;
/** @type { Point } */
    target_contact_vector;
/** @type { Vector3 } */
    target_velocity;
/** @type { Vector3 } */
    target_angular_velocity;
/** @type { Vector3 } */
    target_euler;
/** @type { Vector3 } */
    target_inertia;
/** @type { number } */
    target_mass;


    constructor() {
        this.collision = false;
        this.is_target_static = false;
        this.restitution_coefficient = 0.0;
        this.self_contact_vector = null;
        this.normal = null;
        this.target_contact_vector = null;
        this.target_velocity = null;
        this.target_angular_velocity = null;
        this.target_euler = null;
        this.target_inertia = null;
        this.target_mass = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'collision'
            const field_val = this.collision;
            if (typeof field_val?.toDict === 'function') {
                d['collision'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['collision'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['collision'] = field_val;
            }
        }
        {
            // handle field 'is_target_static'
            const field_val = this.is_target_static;
            if (typeof field_val?.toDict === 'function') {
                d['is_target_static'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['is_target_static'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['is_target_static'] = field_val;
            }
        }
        {
            // handle field 'restitution_coefficient'
            const field_val = this.restitution_coefficient;
            if (typeof field_val?.toDict === 'function') {
                d['restitution_coefficient'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['restitution_coefficient'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['restitution_coefficient'] = field_val;
            }
        }
        {
            // handle field 'self_contact_vector'
            const field_val = this.self_contact_vector;
            if (typeof field_val?.toDict === 'function') {
                d['self_contact_vector'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['self_contact_vector'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['self_contact_vector'] = field_val;
            }
        }
        {
            // handle field 'normal'
            const field_val = this.normal;
            if (typeof field_val?.toDict === 'function') {
                d['normal'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['normal'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['normal'] = field_val;
            }
        }
        {
            // handle field 'target_contact_vector'
            const field_val = this.target_contact_vector;
            if (typeof field_val?.toDict === 'function') {
                d['target_contact_vector'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['target_contact_vector'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['target_contact_vector'] = field_val;
            }
        }
        {
            // handle field 'target_velocity'
            const field_val = this.target_velocity;
            if (typeof field_val?.toDict === 'function') {
                d['target_velocity'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['target_velocity'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['target_velocity'] = field_val;
            }
        }
        {
            // handle field 'target_angular_velocity'
            const field_val = this.target_angular_velocity;
            if (typeof field_val?.toDict === 'function') {
                d['target_angular_velocity'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['target_angular_velocity'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['target_angular_velocity'] = field_val;
            }
        }
        {
            // handle field 'target_euler'
            const field_val = this.target_euler;
            if (typeof field_val?.toDict === 'function') {
                d['target_euler'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['target_euler'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['target_euler'] = field_val;
            }
        }
        {
            // handle field 'target_inertia'
            const field_val = this.target_inertia;
            if (typeof field_val?.toDict === 'function') {
                d['target_inertia'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['target_inertia'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['target_inertia'] = field_val;
            }
        }
        {
            // handle field 'target_mass'
            const field_val = this.target_mass;
            if (typeof field_val?.toDict === 'function') {
                d['target_mass'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['target_mass'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['target_mass'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { ImpulseCollision }
     */
    static fromDict(d) {
        const obj = new ImpulseCollision();
        if (d.hasOwnProperty('collision')) {
            obj.collision = d.collision;
        }
        if (d.hasOwnProperty('is_target_static')) {
            obj.is_target_static = d.is_target_static;
        }
        if (d.hasOwnProperty('restitution_coefficient')) {
            obj.restitution_coefficient = d.restitution_coefficient;
        }
        if (d.hasOwnProperty('self_contact_vector')) {
            const field_class = Point;
            if (d.self_contact_vector) {
                obj.self_contact_vector = field_class.fromDict(d.self_contact_vector);
            }
        }
        if (d.hasOwnProperty('normal')) {
            const field_class = Vector3;
            if (d.normal) {
                obj.normal = field_class.fromDict(d.normal);
            }
        }
        if (d.hasOwnProperty('target_contact_vector')) {
            const field_class = Point;
            if (d.target_contact_vector) {
                obj.target_contact_vector = field_class.fromDict(d.target_contact_vector);
            }
        }
        if (d.hasOwnProperty('target_velocity')) {
            const field_class = Vector3;
            if (d.target_velocity) {
                obj.target_velocity = field_class.fromDict(d.target_velocity);
            }
        }
        if (d.hasOwnProperty('target_angular_velocity')) {
            const field_class = Vector3;
            if (d.target_angular_velocity) {
                obj.target_angular_velocity = field_class.fromDict(d.target_angular_velocity);
            }
        }
        if (d.hasOwnProperty('target_euler')) {
            const field_class = Vector3;
            if (d.target_euler) {
                obj.target_euler = field_class.fromDict(d.target_euler);
            }
        }
        if (d.hasOwnProperty('target_inertia')) {
            const field_class = Vector3;
            if (d.target_inertia) {
                obj.target_inertia = field_class.fromDict(d.target_inertia);
            }
        }
        if (d.hasOwnProperty('target_mass')) {
            obj.target_mass = d.target_mass;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { ImpulseCollision }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
