import { SimpleVarray } from '../hako_msgs/pdu_jstype_SimpleVarray.js';


/**
 * ROS message: hako_msgs/SimpleStructVarray
 * Generated by hakoniwa-ros2pdu.
 */
export class SimpleStructVarray {
/** @type { number } */
    aaa;
/** @type { Array<string> } */
    fixed_str;
/** @type { Array<string> } */
    varray_str;
/** @type { Array<SimpleVarray> } */
    fixed_array;
/** @type { Array<SimpleVarray> } */
    data;


    constructor() {
        this.aaa = 0;
        this.fixed_str = [];
        this.varray_str = [];
        this.fixed_array = [];
        this.data = [];
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'aaa'
            const field_val = this.aaa;
            if (typeof field_val?.toDict === 'function') {
                d['aaa'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['aaa'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['aaa'] = field_val;
            }
        }
        {
            // handle field 'fixed_str'
            const field_val = this.fixed_str;
            if (typeof field_val?.toDict === 'function') {
                d['fixed_str'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['fixed_str'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['fixed_str'] = field_val;
            }
        }
        {
            // handle field 'varray_str'
            const field_val = this.varray_str;
            if (typeof field_val?.toDict === 'function') {
                d['varray_str'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['varray_str'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['varray_str'] = field_val;
            }
        }
        {
            // handle field 'fixed_array'
            const field_val = this.fixed_array;
            if (typeof field_val?.toDict === 'function') {
                d['fixed_array'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['fixed_array'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['fixed_array'] = field_val;
            }
        }
        {
            // handle field 'data'
            const field_val = this.data;
            if (typeof field_val?.toDict === 'function') {
                d['data'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['data'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['data'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { SimpleStructVarray }
     */
    static fromDict(d) {
        const obj = new SimpleStructVarray();
        if (d.hasOwnProperty('aaa')) {
            obj.aaa = d.aaa;
        }
        if (d.hasOwnProperty('fixed_str')) {
            const item_class = string;
            if (Array.isArray(d.fixed_str)) {
                obj.fixed_str = d.fixed_str.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('varray_str')) {
            const item_class = string;
            if (Array.isArray(d.varray_str)) {
                obj.varray_str = d.varray_str.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('fixed_array')) {
            const item_class = SimpleVarray;
            if (Array.isArray(d.fixed_array)) {
                obj.fixed_array = d.fixed_array.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('data')) {
            const item_class = SimpleVarray;
            if (Array.isArray(d.data)) {
                obj.data = d.data.map(item => item_class.fromDict(item));
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { SimpleStructVarray }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
