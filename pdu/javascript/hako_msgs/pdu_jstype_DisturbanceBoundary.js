import { Point } from '../geometry_msgs/pdu_jstype_Point.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: hako_msgs/DisturbanceBoundary
 * Generated by hakoniwa-ros2pdu.
 */
export class DisturbanceBoundary {
/** @type { Point } */
    boundary_point;
/** @type { Vector3 } */
    boundary_normal;


    constructor() {
        this.boundary_point = new Point();
        this.boundary_normal = new Vector3();
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'boundary_point'
            const field_val = this.boundary_point;
            if (typeof field_val?.toDict === 'function') {
                d['boundary_point'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['boundary_point'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['boundary_point'] = field_val;
            }
        }
        {
            // handle field 'boundary_normal'
            const field_val = this.boundary_normal;
            if (typeof field_val?.toDict === 'function') {
                d['boundary_normal'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['boundary_normal'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['boundary_normal'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { DisturbanceBoundary }
     */
    static fromDict(d) {
        const obj = new DisturbanceBoundary();
        if (d.hasOwnProperty('boundary_point')) {
            const field_class = Point;
            if (d.boundary_point) {
                obj.boundary_point = field_class.fromDict(d.boundary_point);
            }
        }
        if (d.hasOwnProperty('boundary_normal')) {
            const field_class = Vector3;
            if (d.boundary_normal) {
                obj.boundary_normal = field_class.fromDict(d.boundary_normal);
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { DisturbanceBoundary }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
