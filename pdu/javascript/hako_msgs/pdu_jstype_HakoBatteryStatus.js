

/**
 * ROS message: hako_msgs/HakoBatteryStatus
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoBatteryStatus {
/** @type { number } */
    full_voltage;
/** @type { number } */
    curr_voltage;
/** @type { number } */
    curr_temp;
/** @type { number } */
    status;
/** @type { number } */
    cycles;


    constructor() {
        this.full_voltage = 0.0;
        this.curr_voltage = 0.0;
        this.curr_temp = 0.0;
        this.status = 0;
        this.cycles = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'full_voltage'
            const field_val = this.full_voltage;
            if (typeof field_val?.toDict === 'function') {
                d['full_voltage'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['full_voltage'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['full_voltage'] = field_val;
            }
        }
        {
            // handle field 'curr_voltage'
            const field_val = this.curr_voltage;
            if (typeof field_val?.toDict === 'function') {
                d['curr_voltage'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['curr_voltage'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['curr_voltage'] = field_val;
            }
        }
        {
            // handle field 'curr_temp'
            const field_val = this.curr_temp;
            if (typeof field_val?.toDict === 'function') {
                d['curr_temp'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['curr_temp'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['curr_temp'] = field_val;
            }
        }
        {
            // handle field 'status'
            const field_val = this.status;
            if (typeof field_val?.toDict === 'function') {
                d['status'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['status'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['status'] = field_val;
            }
        }
        {
            // handle field 'cycles'
            const field_val = this.cycles;
            if (typeof field_val?.toDict === 'function') {
                d['cycles'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['cycles'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['cycles'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoBatteryStatus }
     */
    static fromDict(d) {
        const obj = new HakoBatteryStatus();
        if (d.hasOwnProperty('full_voltage')) {
            obj.full_voltage = d.full_voltage;
        }
        if (d.hasOwnProperty('curr_voltage')) {
            obj.curr_voltage = d.curr_voltage;
        }
        if (d.hasOwnProperty('curr_temp')) {
            obj.curr_temp = d.curr_temp;
        }
        if (d.hasOwnProperty('status')) {
            obj.status = d.status;
        }
        if (d.hasOwnProperty('cycles')) {
            obj.cycles = d.cycles;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoBatteryStatus }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
