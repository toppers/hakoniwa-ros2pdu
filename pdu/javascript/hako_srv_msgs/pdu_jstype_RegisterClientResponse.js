

/**
 * ROS message: hako_srv_msgs/RegisterClientResponse
 * Generated by hakoniwa-ros2pdu.
 */
export class RegisterClientResponse {
/** @type { number } */
    service_id;
/** @type { number } */
    client_id;
/** @type { number } */
    request_channel_id;
/** @type { number } */
    response_channel_id;


    constructor() {
        this.service_id = 0;
        this.client_id = 0;
        this.request_channel_id = 0;
        this.response_channel_id = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'service_id'
            const field_val = this.service_id;
            if (typeof field_val?.toDict === 'function') {
                d['service_id'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['service_id'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['service_id'] = field_val;
            }
        }
        {
            // handle field 'client_id'
            const field_val = this.client_id;
            if (typeof field_val?.toDict === 'function') {
                d['client_id'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['client_id'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['client_id'] = field_val;
            }
        }
        {
            // handle field 'request_channel_id'
            const field_val = this.request_channel_id;
            if (typeof field_val?.toDict === 'function') {
                d['request_channel_id'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['request_channel_id'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['request_channel_id'] = field_val;
            }
        }
        {
            // handle field 'response_channel_id'
            const field_val = this.response_channel_id;
            if (typeof field_val?.toDict === 'function') {
                d['response_channel_id'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['response_channel_id'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['response_channel_id'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { RegisterClientResponse }
     */
    static fromDict(d) {
        const obj = new RegisterClientResponse();
        if (d.hasOwnProperty('service_id')) {
            obj.service_id = d.service_id;
        }
        if (d.hasOwnProperty('client_id')) {
            obj.client_id = d.client_id;
        }
        if (d.hasOwnProperty('request_channel_id')) {
            obj.request_channel_id = d.request_channel_id;
        }
        if (d.hasOwnProperty('response_channel_id')) {
            obj.response_channel_id = d.response_channel_id;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { RegisterClientResponse }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
