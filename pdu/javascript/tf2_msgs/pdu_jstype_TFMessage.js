import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Quaternion } from '../geometry_msgs/pdu_jstype_Quaternion.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';
import { Transform } from '../geometry_msgs/pdu_jstype_Transform.js';
import { TransformStamped } from '../geometry_msgs/pdu_jstype_TransformStamped.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: tf2_msgs/TFMessage
 * Generated by hakoniwa-ros2pdu.
 */
export class TFMessage {
/** @type { Array<TransformStamped> } */
    transforms;


    constructor() {
        this.transforms = [];
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'transforms'
            const field_val = this.transforms;
            if (typeof field_val?.toDict === 'function') {
                d['transforms'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['transforms'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['transforms'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { TFMessage }
     */
    static fromDict(d) {
        const obj = new TFMessage();
        if (d.hasOwnProperty('transforms')) {
            const item_class = TransformStamped;
            if (Array.isArray(d.transforms)) {
                obj.transforms = d.transforms.map(item => item_class.fromDict(item));
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { TFMessage }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
