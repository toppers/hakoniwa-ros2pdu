import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Point } from '../geometry_msgs/pdu_jstype_Point.js';
import { PointCloud2 } from '../sensor_msgs/pdu_jstype_PointCloud2.js';
import { PointField } from '../sensor_msgs/pdu_jstype_PointField.js';
import { Pose } from '../geometry_msgs/pdu_jstype_Pose.js';
import { Quaternion } from '../geometry_msgs/pdu_jstype_Quaternion.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';


/**
 * ROS message: drone_srv_msgs/LiDARScanResponse
 * Generated by hakoniwa-ros2pdu.
 */
export class LiDARScanResponse {
/** @type { boolean } */
    ok;
/** @type { PointCloud2 } */
    point_cloud;
/** @type { Pose } */
    lidar_pose;
/** @type { string } */
    message;


    constructor() {
        this.ok = false;
        this.point_cloud = new PointCloud2();
        this.lidar_pose = new Pose();
        this.message = "";
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'ok'
            const field_val = this.ok;
            if (typeof field_val?.toDict === 'function') {
                d['ok'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['ok'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['ok'] = field_val;
            }
        }
        {
            // handle field 'point_cloud'
            const field_val = this.point_cloud;
            if (typeof field_val?.toDict === 'function') {
                d['point_cloud'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['point_cloud'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['point_cloud'] = field_val;
            }
        }
        {
            // handle field 'lidar_pose'
            const field_val = this.lidar_pose;
            if (typeof field_val?.toDict === 'function') {
                d['lidar_pose'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lidar_pose'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lidar_pose'] = field_val;
            }
        }
        {
            // handle field 'message'
            const field_val = this.message;
            if (typeof field_val?.toDict === 'function') {
                d['message'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['message'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['message'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { LiDARScanResponse }
     */
    static fromDict(d) {
        const obj = new LiDARScanResponse();
        if (d.hasOwnProperty('ok')) {
            obj.ok = d.ok;
        }
        if (d.hasOwnProperty('point_cloud')) {
            const field_class = PointCloud2;
            if (d.point_cloud) {
                obj.point_cloud = field_class.fromDict(d.point_cloud);
            }
        }
        if (d.hasOwnProperty('lidar_pose')) {
            const field_class = Pose;
            if (d.lidar_pose) {
                obj.lidar_pose = field_class.fromDict(d.lidar_pose);
            }
        }
        if (d.hasOwnProperty('message')) {
            obj.message = d.message;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { LiDARScanResponse }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
