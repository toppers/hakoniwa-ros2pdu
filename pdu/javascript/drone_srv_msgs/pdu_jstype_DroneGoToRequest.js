import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: drone_srv_msgs/DroneGoToRequest
 * Generated by hakoniwa-ros2pdu.
 */
export class DroneGoToRequest {
/** @type { string } */
    drone_name;
/** @type { Vector3 } */
    target_pose;
/** @type { number } */
    speed_m_s;
/** @type { number } */
    yaw_deg;
/** @type { number } */
    tolerance_m;
/** @type { number } */
    timeout_sec;


    constructor() {
        this.drone_name = "";
        this.target_pose = null;
        this.speed_m_s = 0.0;
        this.yaw_deg = 0.0;
        this.tolerance_m = 0.0;
        this.timeout_sec = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'drone_name'
            const field_val = this.drone_name;
            if (typeof field_val?.toDict === 'function') {
                d['drone_name'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['drone_name'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['drone_name'] = field_val;
            }
        }
        {
            // handle field 'target_pose'
            const field_val = this.target_pose;
            if (typeof field_val?.toDict === 'function') {
                d['target_pose'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['target_pose'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['target_pose'] = field_val;
            }
        }
        {
            // handle field 'speed_m_s'
            const field_val = this.speed_m_s;
            if (typeof field_val?.toDict === 'function') {
                d['speed_m_s'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['speed_m_s'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['speed_m_s'] = field_val;
            }
        }
        {
            // handle field 'yaw_deg'
            const field_val = this.yaw_deg;
            if (typeof field_val?.toDict === 'function') {
                d['yaw_deg'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yaw_deg'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yaw_deg'] = field_val;
            }
        }
        {
            // handle field 'tolerance_m'
            const field_val = this.tolerance_m;
            if (typeof field_val?.toDict === 'function') {
                d['tolerance_m'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['tolerance_m'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['tolerance_m'] = field_val;
            }
        }
        {
            // handle field 'timeout_sec'
            const field_val = this.timeout_sec;
            if (typeof field_val?.toDict === 'function') {
                d['timeout_sec'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['timeout_sec'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['timeout_sec'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { DroneGoToRequest }
     */
    static fromDict(d) {
        const obj = new DroneGoToRequest();
        if (d.hasOwnProperty('drone_name')) {
            obj.drone_name = d.drone_name;
        }
        if (d.hasOwnProperty('target_pose')) {
            const field_class = Vector3;
            if (d.target_pose) {
                obj.target_pose = field_class.fromDict(d.target_pose);
            }
        }
        if (d.hasOwnProperty('speed_m_s')) {
            obj.speed_m_s = d.speed_m_s;
        }
        if (d.hasOwnProperty('yaw_deg')) {
            obj.yaw_deg = d.yaw_deg;
        }
        if (d.hasOwnProperty('tolerance_m')) {
            obj.tolerance_m = d.tolerance_m;
        }
        if (d.hasOwnProperty('timeout_sec')) {
            obj.timeout_sec = d.timeout_sec;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { DroneGoToRequest }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
