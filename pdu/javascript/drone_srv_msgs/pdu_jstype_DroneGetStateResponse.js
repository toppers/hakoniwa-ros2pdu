import { HakoBatteryStatus } from '../hako_msgs/pdu_jstype_HakoBatteryStatus.js';
import { Point } from '../geometry_msgs/pdu_jstype_Point.js';
import { Pose } from '../geometry_msgs/pdu_jstype_Pose.js';
import { Quaternion } from '../geometry_msgs/pdu_jstype_Quaternion.js';


/**
 * ROS message: drone_srv_msgs/DroneGetStateResponse
 * Generated by hakoniwa-ros2pdu.
 */
export class DroneGetStateResponse {
/** @type { boolean } */
    ok;
/** @type { boolean } */
    is_ready;
/** @type { Pose } */
    current_pose;
/** @type { HakoBatteryStatus } */
    battery_status;
/** @type { string } */
    mode;
/** @type { string } */
    message;


    constructor() {
        this.ok = false;
        this.is_ready = false;
        this.current_pose = null;
        this.battery_status = null;
        this.mode = "";
        this.message = "";
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'ok'
            const field_val = this.ok;
            if (typeof field_val?.toDict === 'function') {
                d['ok'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['ok'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['ok'] = field_val;
            }
        }
        {
            // handle field 'is_ready'
            const field_val = this.is_ready;
            if (typeof field_val?.toDict === 'function') {
                d['is_ready'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['is_ready'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['is_ready'] = field_val;
            }
        }
        {
            // handle field 'current_pose'
            const field_val = this.current_pose;
            if (typeof field_val?.toDict === 'function') {
                d['current_pose'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['current_pose'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['current_pose'] = field_val;
            }
        }
        {
            // handle field 'battery_status'
            const field_val = this.battery_status;
            if (typeof field_val?.toDict === 'function') {
                d['battery_status'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['battery_status'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['battery_status'] = field_val;
            }
        }
        {
            // handle field 'mode'
            const field_val = this.mode;
            if (typeof field_val?.toDict === 'function') {
                d['mode'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['mode'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['mode'] = field_val;
            }
        }
        {
            // handle field 'message'
            const field_val = this.message;
            if (typeof field_val?.toDict === 'function') {
                d['message'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['message'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['message'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { DroneGetStateResponse }
     */
    static fromDict(d) {
        const obj = new DroneGetStateResponse();
        if (d.hasOwnProperty('ok')) {
            obj.ok = d.ok;
        }
        if (d.hasOwnProperty('is_ready')) {
            obj.is_ready = d.is_ready;
        }
        if (d.hasOwnProperty('current_pose')) {
            const field_class = Pose;
            if (d.current_pose) {
                obj.current_pose = field_class.fromDict(d.current_pose);
            }
        }
        if (d.hasOwnProperty('battery_status')) {
            const field_class = HakoBatteryStatus;
            if (d.battery_status) {
                obj.battery_status = field_class.fromDict(d.battery_status);
            }
        }
        if (d.hasOwnProperty('mode')) {
            obj.mode = d.mode;
        }
        if (d.hasOwnProperty('message')) {
            obj.message = d.message;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { DroneGetStateResponse }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
