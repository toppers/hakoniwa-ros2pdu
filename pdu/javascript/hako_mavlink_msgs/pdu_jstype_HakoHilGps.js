

/**
 * ROS message: hako_mavlink_msgs/HakoHilGps
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoHilGps {
/** @type { bigint } */
    time_usec;
/** @type { number } */
    lat;
/** @type { number } */
    lon;
/** @type { number } */
    alt;
/** @type { number } */
    eph;
/** @type { number } */
    epv;
/** @type { number } */
    vel;
/** @type { number } */
    vn;
/** @type { number } */
    ve;
/** @type { number } */
    vd;
/** @type { number } */
    cog;
/** @type { number } */
    satellites_visible;
/** @type { number } */
    id;
/** @type { number } */
    yaw;
/** @type { number } */
    fix_type;


    constructor() {
        this.time_usec = 0n;
        this.lat = 0;
        this.lon = 0;
        this.alt = 0;
        this.eph = 0;
        this.epv = 0;
        this.vel = 0;
        this.vn = 0;
        this.ve = 0;
        this.vd = 0;
        this.cog = 0;
        this.satellites_visible = 0;
        this.id = 0;
        this.yaw = 0;
        this.fix_type = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'time_usec'
            const field_val = this.time_usec;
            if (typeof field_val?.toDict === 'function') {
                d['time_usec'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['time_usec'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['time_usec'] = field_val;
            }
        }
        {
            // handle field 'lat'
            const field_val = this.lat;
            if (typeof field_val?.toDict === 'function') {
                d['lat'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lat'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lat'] = field_val;
            }
        }
        {
            // handle field 'lon'
            const field_val = this.lon;
            if (typeof field_val?.toDict === 'function') {
                d['lon'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lon'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lon'] = field_val;
            }
        }
        {
            // handle field 'alt'
            const field_val = this.alt;
            if (typeof field_val?.toDict === 'function') {
                d['alt'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['alt'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['alt'] = field_val;
            }
        }
        {
            // handle field 'eph'
            const field_val = this.eph;
            if (typeof field_val?.toDict === 'function') {
                d['eph'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['eph'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['eph'] = field_val;
            }
        }
        {
            // handle field 'epv'
            const field_val = this.epv;
            if (typeof field_val?.toDict === 'function') {
                d['epv'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['epv'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['epv'] = field_val;
            }
        }
        {
            // handle field 'vel'
            const field_val = this.vel;
            if (typeof field_val?.toDict === 'function') {
                d['vel'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vel'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vel'] = field_val;
            }
        }
        {
            // handle field 'vn'
            const field_val = this.vn;
            if (typeof field_val?.toDict === 'function') {
                d['vn'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vn'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vn'] = field_val;
            }
        }
        {
            // handle field 've'
            const field_val = this.ve;
            if (typeof field_val?.toDict === 'function') {
                d['ve'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['ve'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['ve'] = field_val;
            }
        }
        {
            // handle field 'vd'
            const field_val = this.vd;
            if (typeof field_val?.toDict === 'function') {
                d['vd'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vd'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vd'] = field_val;
            }
        }
        {
            // handle field 'cog'
            const field_val = this.cog;
            if (typeof field_val?.toDict === 'function') {
                d['cog'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['cog'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['cog'] = field_val;
            }
        }
        {
            // handle field 'satellites_visible'
            const field_val = this.satellites_visible;
            if (typeof field_val?.toDict === 'function') {
                d['satellites_visible'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['satellites_visible'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['satellites_visible'] = field_val;
            }
        }
        {
            // handle field 'id'
            const field_val = this.id;
            if (typeof field_val?.toDict === 'function') {
                d['id'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['id'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['id'] = field_val;
            }
        }
        {
            // handle field 'yaw'
            const field_val = this.yaw;
            if (typeof field_val?.toDict === 'function') {
                d['yaw'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yaw'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yaw'] = field_val;
            }
        }
        {
            // handle field 'fix_type'
            const field_val = this.fix_type;
            if (typeof field_val?.toDict === 'function') {
                d['fix_type'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['fix_type'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['fix_type'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoHilGps }
     */
    static fromDict(d) {
        const obj = new HakoHilGps();
        if (d.hasOwnProperty('time_usec')) {
            obj.time_usec = d.time_usec;
        }
        if (d.hasOwnProperty('lat')) {
            obj.lat = d.lat;
        }
        if (d.hasOwnProperty('lon')) {
            obj.lon = d.lon;
        }
        if (d.hasOwnProperty('alt')) {
            obj.alt = d.alt;
        }
        if (d.hasOwnProperty('eph')) {
            obj.eph = d.eph;
        }
        if (d.hasOwnProperty('epv')) {
            obj.epv = d.epv;
        }
        if (d.hasOwnProperty('vel')) {
            obj.vel = d.vel;
        }
        if (d.hasOwnProperty('vn')) {
            obj.vn = d.vn;
        }
        if (d.hasOwnProperty('ve')) {
            obj.ve = d.ve;
        }
        if (d.hasOwnProperty('vd')) {
            obj.vd = d.vd;
        }
        if (d.hasOwnProperty('cog')) {
            obj.cog = d.cog;
        }
        if (d.hasOwnProperty('satellites_visible')) {
            obj.satellites_visible = d.satellites_visible;
        }
        if (d.hasOwnProperty('id')) {
            obj.id = d.id;
        }
        if (d.hasOwnProperty('yaw')) {
            obj.yaw = d.yaw;
        }
        if (d.hasOwnProperty('fix_type')) {
            obj.fix_type = d.fix_type;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoHilGps }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
