

/**
 * ROS message: hako_mavlink_msgs/HakoAHRS2
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoAHRS2 {
/** @type { number } */
    roll;
/** @type { number } */
    pitch;
/** @type { number } */
    yaw;
/** @type { number } */
    altitude;
/** @type { number } */
    lat;
/** @type { number } */
    lng;


    constructor() {
        this.roll = 0.0;
        this.pitch = 0.0;
        this.yaw = 0.0;
        this.altitude = 0.0;
        this.lat = 0;
        this.lng = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'roll'
            const field_val = this.roll;
            if (typeof field_val?.toDict === 'function') {
                d['roll'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['roll'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['roll'] = field_val;
            }
        }
        {
            // handle field 'pitch'
            const field_val = this.pitch;
            if (typeof field_val?.toDict === 'function') {
                d['pitch'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['pitch'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['pitch'] = field_val;
            }
        }
        {
            // handle field 'yaw'
            const field_val = this.yaw;
            if (typeof field_val?.toDict === 'function') {
                d['yaw'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yaw'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yaw'] = field_val;
            }
        }
        {
            // handle field 'altitude'
            const field_val = this.altitude;
            if (typeof field_val?.toDict === 'function') {
                d['altitude'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['altitude'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['altitude'] = field_val;
            }
        }
        {
            // handle field 'lat'
            const field_val = this.lat;
            if (typeof field_val?.toDict === 'function') {
                d['lat'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lat'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lat'] = field_val;
            }
        }
        {
            // handle field 'lng'
            const field_val = this.lng;
            if (typeof field_val?.toDict === 'function') {
                d['lng'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lng'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lng'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoAHRS2 }
     */
    static fromDict(d) {
        const obj = new HakoAHRS2();
        if (d.hasOwnProperty('roll')) {
            obj.roll = d.roll;
        }
        if (d.hasOwnProperty('pitch')) {
            obj.pitch = d.pitch;
        }
        if (d.hasOwnProperty('yaw')) {
            obj.yaw = d.yaw;
        }
        if (d.hasOwnProperty('altitude')) {
            obj.altitude = d.altitude;
        }
        if (d.hasOwnProperty('lat')) {
            obj.lat = d.lat;
        }
        if (d.hasOwnProperty('lng')) {
            obj.lng = d.lng;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoAHRS2 }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
