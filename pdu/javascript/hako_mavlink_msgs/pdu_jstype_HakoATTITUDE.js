

/**
 * ROS message: hako_mavlink_msgs/HakoATTITUDE
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoATTITUDE {
/** @type { number } */
    time_boot_ms;
/** @type { number } */
    roll;
/** @type { number } */
    pitch;
/** @type { number } */
    yaw;
/** @type { number } */
    rollspeed;
/** @type { number } */
    pitchspeed;
/** @type { number } */
    yawspeed;


    constructor() {
        this.time_boot_ms = 0;
        this.roll = 0.0;
        this.pitch = 0.0;
        this.yaw = 0.0;
        this.rollspeed = 0.0;
        this.pitchspeed = 0.0;
        this.yawspeed = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'time_boot_ms'
            const field_val = this.time_boot_ms;
            if (typeof field_val?.toDict === 'function') {
                d['time_boot_ms'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['time_boot_ms'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['time_boot_ms'] = field_val;
            }
        }
        {
            // handle field 'roll'
            const field_val = this.roll;
            if (typeof field_val?.toDict === 'function') {
                d['roll'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['roll'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['roll'] = field_val;
            }
        }
        {
            // handle field 'pitch'
            const field_val = this.pitch;
            if (typeof field_val?.toDict === 'function') {
                d['pitch'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['pitch'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['pitch'] = field_val;
            }
        }
        {
            // handle field 'yaw'
            const field_val = this.yaw;
            if (typeof field_val?.toDict === 'function') {
                d['yaw'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yaw'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yaw'] = field_val;
            }
        }
        {
            // handle field 'rollspeed'
            const field_val = this.rollspeed;
            if (typeof field_val?.toDict === 'function') {
                d['rollspeed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['rollspeed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['rollspeed'] = field_val;
            }
        }
        {
            // handle field 'pitchspeed'
            const field_val = this.pitchspeed;
            if (typeof field_val?.toDict === 'function') {
                d['pitchspeed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['pitchspeed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['pitchspeed'] = field_val;
            }
        }
        {
            // handle field 'yawspeed'
            const field_val = this.yawspeed;
            if (typeof field_val?.toDict === 'function') {
                d['yawspeed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yawspeed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yawspeed'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoATTITUDE }
     */
    static fromDict(d) {
        const obj = new HakoATTITUDE();
        if (d.hasOwnProperty('time_boot_ms')) {
            obj.time_boot_ms = d.time_boot_ms;
        }
        if (d.hasOwnProperty('roll')) {
            obj.roll = d.roll;
        }
        if (d.hasOwnProperty('pitch')) {
            obj.pitch = d.pitch;
        }
        if (d.hasOwnProperty('yaw')) {
            obj.yaw = d.yaw;
        }
        if (d.hasOwnProperty('rollspeed')) {
            obj.rollspeed = d.rollspeed;
        }
        if (d.hasOwnProperty('pitchspeed')) {
            obj.pitchspeed = d.pitchspeed;
        }
        if (d.hasOwnProperty('yawspeed')) {
            obj.yawspeed = d.yawspeed;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoATTITUDE }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
