

/**
 * ROS message: hako_mavlink_msgs/HakoHeartbeat
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoHeartbeat {
/** @type { number } */
    type;
/** @type { number } */
    autopilot;
/** @type { number } */
    base_mode;
/** @type { number } */
    custom_mode;
/** @type { number } */
    system_status;
/** @type { number } */
    mavlink_version;


    constructor() {
        this.type = 0;
        this.autopilot = 0;
        this.base_mode = 0;
        this.custom_mode = 0;
        this.system_status = 0;
        this.mavlink_version = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'type'
            const field_val = this.type;
            if (typeof field_val?.toDict === 'function') {
                d['type'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['type'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['type'] = field_val;
            }
        }
        {
            // handle field 'autopilot'
            const field_val = this.autopilot;
            if (typeof field_val?.toDict === 'function') {
                d['autopilot'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['autopilot'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['autopilot'] = field_val;
            }
        }
        {
            // handle field 'base_mode'
            const field_val = this.base_mode;
            if (typeof field_val?.toDict === 'function') {
                d['base_mode'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['base_mode'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['base_mode'] = field_val;
            }
        }
        {
            // handle field 'custom_mode'
            const field_val = this.custom_mode;
            if (typeof field_val?.toDict === 'function') {
                d['custom_mode'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['custom_mode'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['custom_mode'] = field_val;
            }
        }
        {
            // handle field 'system_status'
            const field_val = this.system_status;
            if (typeof field_val?.toDict === 'function') {
                d['system_status'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['system_status'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['system_status'] = field_val;
            }
        }
        {
            // handle field 'mavlink_version'
            const field_val = this.mavlink_version;
            if (typeof field_val?.toDict === 'function') {
                d['mavlink_version'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['mavlink_version'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['mavlink_version'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoHeartbeat }
     */
    static fromDict(d) {
        const obj = new HakoHeartbeat();
        if (d.hasOwnProperty('type')) {
            obj.type = d.type;
        }
        if (d.hasOwnProperty('autopilot')) {
            obj.autopilot = d.autopilot;
        }
        if (d.hasOwnProperty('base_mode')) {
            obj.base_mode = d.base_mode;
        }
        if (d.hasOwnProperty('custom_mode')) {
            obj.custom_mode = d.custom_mode;
        }
        if (d.hasOwnProperty('system_status')) {
            obj.system_status = d.system_status;
        }
        if (d.hasOwnProperty('mavlink_version')) {
            obj.mavlink_version = d.mavlink_version;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoHeartbeat }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
