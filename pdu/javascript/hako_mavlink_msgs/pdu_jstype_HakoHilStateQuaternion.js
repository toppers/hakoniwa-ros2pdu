

/**
 * ROS message: hako_mavlink_msgs/HakoHilStateQuaternion
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoHilStateQuaternion {
/** @type { bigint } */
    time_usec;
/** @type { Array<number> } */
    attitude_quaternion;
/** @type { number } */
    rollspeed;
/** @type { number } */
    pitchspeed;
/** @type { number } */
    yawspeed;
/** @type { number } */
    lat;
/** @type { number } */
    lon;
/** @type { number } */
    alt;
/** @type { number } */
    vx;
/** @type { number } */
    vy;
/** @type { number } */
    vz;
/** @type { number } */
    ind_airspeed;
/** @type { number } */
    true_airspeed;
/** @type { number } */
    xacc;
/** @type { number } */
    yacc;
/** @type { number } */
    zacc;


    constructor() {
        this.time_usec = 0n;
        this.attitude_quaternion = [];
        this.rollspeed = 0.0;
        this.pitchspeed = 0.0;
        this.yawspeed = 0.0;
        this.lat = 0;
        this.lon = 0;
        this.alt = 0;
        this.vx = 0;
        this.vy = 0;
        this.vz = 0;
        this.ind_airspeed = 0;
        this.true_airspeed = 0;
        this.xacc = 0;
        this.yacc = 0;
        this.zacc = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'time_usec'
            const field_val = this.time_usec;
            if (typeof field_val?.toDict === 'function') {
                d['time_usec'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['time_usec'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['time_usec'] = field_val;
            }
        }
        {
            // handle field 'attitude_quaternion'
            const field_val = this.attitude_quaternion;
            if (typeof field_val?.toDict === 'function') {
                d['attitude_quaternion'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['attitude_quaternion'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['attitude_quaternion'] = field_val;
            }
        }
        {
            // handle field 'rollspeed'
            const field_val = this.rollspeed;
            if (typeof field_val?.toDict === 'function') {
                d['rollspeed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['rollspeed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['rollspeed'] = field_val;
            }
        }
        {
            // handle field 'pitchspeed'
            const field_val = this.pitchspeed;
            if (typeof field_val?.toDict === 'function') {
                d['pitchspeed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['pitchspeed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['pitchspeed'] = field_val;
            }
        }
        {
            // handle field 'yawspeed'
            const field_val = this.yawspeed;
            if (typeof field_val?.toDict === 'function') {
                d['yawspeed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yawspeed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yawspeed'] = field_val;
            }
        }
        {
            // handle field 'lat'
            const field_val = this.lat;
            if (typeof field_val?.toDict === 'function') {
                d['lat'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lat'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lat'] = field_val;
            }
        }
        {
            // handle field 'lon'
            const field_val = this.lon;
            if (typeof field_val?.toDict === 'function') {
                d['lon'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lon'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lon'] = field_val;
            }
        }
        {
            // handle field 'alt'
            const field_val = this.alt;
            if (typeof field_val?.toDict === 'function') {
                d['alt'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['alt'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['alt'] = field_val;
            }
        }
        {
            // handle field 'vx'
            const field_val = this.vx;
            if (typeof field_val?.toDict === 'function') {
                d['vx'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vx'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vx'] = field_val;
            }
        }
        {
            // handle field 'vy'
            const field_val = this.vy;
            if (typeof field_val?.toDict === 'function') {
                d['vy'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vy'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vy'] = field_val;
            }
        }
        {
            // handle field 'vz'
            const field_val = this.vz;
            if (typeof field_val?.toDict === 'function') {
                d['vz'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vz'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vz'] = field_val;
            }
        }
        {
            // handle field 'ind_airspeed'
            const field_val = this.ind_airspeed;
            if (typeof field_val?.toDict === 'function') {
                d['ind_airspeed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['ind_airspeed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['ind_airspeed'] = field_val;
            }
        }
        {
            // handle field 'true_airspeed'
            const field_val = this.true_airspeed;
            if (typeof field_val?.toDict === 'function') {
                d['true_airspeed'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['true_airspeed'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['true_airspeed'] = field_val;
            }
        }
        {
            // handle field 'xacc'
            const field_val = this.xacc;
            if (typeof field_val?.toDict === 'function') {
                d['xacc'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['xacc'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['xacc'] = field_val;
            }
        }
        {
            // handle field 'yacc'
            const field_val = this.yacc;
            if (typeof field_val?.toDict === 'function') {
                d['yacc'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yacc'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yacc'] = field_val;
            }
        }
        {
            // handle field 'zacc'
            const field_val = this.zacc;
            if (typeof field_val?.toDict === 'function') {
                d['zacc'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['zacc'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['zacc'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoHilStateQuaternion }
     */
    static fromDict(d) {
        const obj = new HakoHilStateQuaternion();
        if (d.hasOwnProperty('time_usec')) {
            obj.time_usec = d.time_usec;
        }
        if (d.hasOwnProperty('attitude_quaternion')) {
            const item_class = float32;
            if (Array.isArray(d.attitude_quaternion)) {
                obj.attitude_quaternion = d.attitude_quaternion.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('rollspeed')) {
            obj.rollspeed = d.rollspeed;
        }
        if (d.hasOwnProperty('pitchspeed')) {
            obj.pitchspeed = d.pitchspeed;
        }
        if (d.hasOwnProperty('yawspeed')) {
            obj.yawspeed = d.yawspeed;
        }
        if (d.hasOwnProperty('lat')) {
            obj.lat = d.lat;
        }
        if (d.hasOwnProperty('lon')) {
            obj.lon = d.lon;
        }
        if (d.hasOwnProperty('alt')) {
            obj.alt = d.alt;
        }
        if (d.hasOwnProperty('vx')) {
            obj.vx = d.vx;
        }
        if (d.hasOwnProperty('vy')) {
            obj.vy = d.vy;
        }
        if (d.hasOwnProperty('vz')) {
            obj.vz = d.vz;
        }
        if (d.hasOwnProperty('ind_airspeed')) {
            obj.ind_airspeed = d.ind_airspeed;
        }
        if (d.hasOwnProperty('true_airspeed')) {
            obj.true_airspeed = d.true_airspeed;
        }
        if (d.hasOwnProperty('xacc')) {
            obj.xacc = d.xacc;
        }
        if (d.hasOwnProperty('yacc')) {
            obj.yacc = d.yacc;
        }
        if (d.hasOwnProperty('zacc')) {
            obj.zacc = d.zacc;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoHilStateQuaternion }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
