

/**
 * ROS message: hako_mavlink_msgs/HakoHilSensor
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoHilSensor {
/** @type { bigint } */
    time_usec;
/** @type { number } */
    xacc;
/** @type { number } */
    yacc;
/** @type { number } */
    zacc;
/** @type { number } */
    xgyro;
/** @type { number } */
    ygyro;
/** @type { number } */
    zgyro;
/** @type { number } */
    xmag;
/** @type { number } */
    ymag;
/** @type { number } */
    zmag;
/** @type { number } */
    abs_pressure;
/** @type { number } */
    diff_pressure;
/** @type { number } */
    pressure_alt;
/** @type { number } */
    temperature;
/** @type { number } */
    fields_updated;
/** @type { number } */
    id;


    constructor() {
        this.time_usec = 0n;
        this.xacc = 0.0;
        this.yacc = 0.0;
        this.zacc = 0.0;
        this.xgyro = 0.0;
        this.ygyro = 0.0;
        this.zgyro = 0.0;
        this.xmag = 0.0;
        this.ymag = 0.0;
        this.zmag = 0.0;
        this.abs_pressure = 0.0;
        this.diff_pressure = 0.0;
        this.pressure_alt = 0.0;
        this.temperature = 0.0;
        this.fields_updated = 0;
        this.id = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'time_usec'
            const field_val = this.time_usec;
            if (typeof field_val?.toDict === 'function') {
                d['time_usec'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['time_usec'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['time_usec'] = field_val;
            }
        }
        {
            // handle field 'xacc'
            const field_val = this.xacc;
            if (typeof field_val?.toDict === 'function') {
                d['xacc'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['xacc'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['xacc'] = field_val;
            }
        }
        {
            // handle field 'yacc'
            const field_val = this.yacc;
            if (typeof field_val?.toDict === 'function') {
                d['yacc'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yacc'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yacc'] = field_val;
            }
        }
        {
            // handle field 'zacc'
            const field_val = this.zacc;
            if (typeof field_val?.toDict === 'function') {
                d['zacc'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['zacc'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['zacc'] = field_val;
            }
        }
        {
            // handle field 'xgyro'
            const field_val = this.xgyro;
            if (typeof field_val?.toDict === 'function') {
                d['xgyro'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['xgyro'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['xgyro'] = field_val;
            }
        }
        {
            // handle field 'ygyro'
            const field_val = this.ygyro;
            if (typeof field_val?.toDict === 'function') {
                d['ygyro'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['ygyro'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['ygyro'] = field_val;
            }
        }
        {
            // handle field 'zgyro'
            const field_val = this.zgyro;
            if (typeof field_val?.toDict === 'function') {
                d['zgyro'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['zgyro'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['zgyro'] = field_val;
            }
        }
        {
            // handle field 'xmag'
            const field_val = this.xmag;
            if (typeof field_val?.toDict === 'function') {
                d['xmag'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['xmag'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['xmag'] = field_val;
            }
        }
        {
            // handle field 'ymag'
            const field_val = this.ymag;
            if (typeof field_val?.toDict === 'function') {
                d['ymag'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['ymag'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['ymag'] = field_val;
            }
        }
        {
            // handle field 'zmag'
            const field_val = this.zmag;
            if (typeof field_val?.toDict === 'function') {
                d['zmag'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['zmag'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['zmag'] = field_val;
            }
        }
        {
            // handle field 'abs_pressure'
            const field_val = this.abs_pressure;
            if (typeof field_val?.toDict === 'function') {
                d['abs_pressure'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['abs_pressure'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['abs_pressure'] = field_val;
            }
        }
        {
            // handle field 'diff_pressure'
            const field_val = this.diff_pressure;
            if (typeof field_val?.toDict === 'function') {
                d['diff_pressure'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['diff_pressure'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['diff_pressure'] = field_val;
            }
        }
        {
            // handle field 'pressure_alt'
            const field_val = this.pressure_alt;
            if (typeof field_val?.toDict === 'function') {
                d['pressure_alt'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['pressure_alt'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['pressure_alt'] = field_val;
            }
        }
        {
            // handle field 'temperature'
            const field_val = this.temperature;
            if (typeof field_val?.toDict === 'function') {
                d['temperature'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['temperature'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['temperature'] = field_val;
            }
        }
        {
            // handle field 'fields_updated'
            const field_val = this.fields_updated;
            if (typeof field_val?.toDict === 'function') {
                d['fields_updated'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['fields_updated'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['fields_updated'] = field_val;
            }
        }
        {
            // handle field 'id'
            const field_val = this.id;
            if (typeof field_val?.toDict === 'function') {
                d['id'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['id'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['id'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoHilSensor }
     */
    static fromDict(d) {
        const obj = new HakoHilSensor();
        if (d.hasOwnProperty('time_usec')) {
            obj.time_usec = d.time_usec;
        }
        if (d.hasOwnProperty('xacc')) {
            obj.xacc = d.xacc;
        }
        if (d.hasOwnProperty('yacc')) {
            obj.yacc = d.yacc;
        }
        if (d.hasOwnProperty('zacc')) {
            obj.zacc = d.zacc;
        }
        if (d.hasOwnProperty('xgyro')) {
            obj.xgyro = d.xgyro;
        }
        if (d.hasOwnProperty('ygyro')) {
            obj.ygyro = d.ygyro;
        }
        if (d.hasOwnProperty('zgyro')) {
            obj.zgyro = d.zgyro;
        }
        if (d.hasOwnProperty('xmag')) {
            obj.xmag = d.xmag;
        }
        if (d.hasOwnProperty('ymag')) {
            obj.ymag = d.ymag;
        }
        if (d.hasOwnProperty('zmag')) {
            obj.zmag = d.zmag;
        }
        if (d.hasOwnProperty('abs_pressure')) {
            obj.abs_pressure = d.abs_pressure;
        }
        if (d.hasOwnProperty('diff_pressure')) {
            obj.diff_pressure = d.diff_pressure;
        }
        if (d.hasOwnProperty('pressure_alt')) {
            obj.pressure_alt = d.pressure_alt;
        }
        if (d.hasOwnProperty('temperature')) {
            obj.temperature = d.temperature;
        }
        if (d.hasOwnProperty('fields_updated')) {
            obj.fields_updated = d.fields_updated;
        }
        if (d.hasOwnProperty('id')) {
            obj.id = d.id;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoHilSensor }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
