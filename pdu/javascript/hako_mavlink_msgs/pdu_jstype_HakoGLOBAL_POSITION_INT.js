

/**
 * ROS message: hako_mavlink_msgs/HakoGLOBAL_POSITION_INT
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoGLOBAL_POSITION_INT {
/** @type { number } */
    time_boot_ms;
/** @type { number } */
    lat;
/** @type { number } */
    lon;
/** @type { number } */
    alt;
/** @type { number } */
    relative_alt;
/** @type { number } */
    vx;
/** @type { number } */
    vy;
/** @type { number } */
    vz;
/** @type { number } */
    hdg;


    constructor() {
        this.time_boot_ms = 0;
        this.lat = 0;
        this.lon = 0;
        this.alt = 0;
        this.relative_alt = 0;
        this.vx = 0;
        this.vy = 0;
        this.vz = 0;
        this.hdg = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'time_boot_ms'
            const field_val = this.time_boot_ms;
            if (typeof field_val?.toDict === 'function') {
                d['time_boot_ms'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['time_boot_ms'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['time_boot_ms'] = field_val;
            }
        }
        {
            // handle field 'lat'
            const field_val = this.lat;
            if (typeof field_val?.toDict === 'function') {
                d['lat'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lat'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lat'] = field_val;
            }
        }
        {
            // handle field 'lon'
            const field_val = this.lon;
            if (typeof field_val?.toDict === 'function') {
                d['lon'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['lon'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['lon'] = field_val;
            }
        }
        {
            // handle field 'alt'
            const field_val = this.alt;
            if (typeof field_val?.toDict === 'function') {
                d['alt'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['alt'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['alt'] = field_val;
            }
        }
        {
            // handle field 'relative_alt'
            const field_val = this.relative_alt;
            if (typeof field_val?.toDict === 'function') {
                d['relative_alt'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['relative_alt'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['relative_alt'] = field_val;
            }
        }
        {
            // handle field 'vx'
            const field_val = this.vx;
            if (typeof field_val?.toDict === 'function') {
                d['vx'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vx'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vx'] = field_val;
            }
        }
        {
            // handle field 'vy'
            const field_val = this.vy;
            if (typeof field_val?.toDict === 'function') {
                d['vy'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vy'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vy'] = field_val;
            }
        }
        {
            // handle field 'vz'
            const field_val = this.vz;
            if (typeof field_val?.toDict === 'function') {
                d['vz'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['vz'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['vz'] = field_val;
            }
        }
        {
            // handle field 'hdg'
            const field_val = this.hdg;
            if (typeof field_val?.toDict === 'function') {
                d['hdg'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['hdg'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['hdg'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoGLOBAL_POSITION_INT }
     */
    static fromDict(d) {
        const obj = new HakoGLOBAL_POSITION_INT();
        if (d.hasOwnProperty('time_boot_ms')) {
            obj.time_boot_ms = d.time_boot_ms;
        }
        if (d.hasOwnProperty('lat')) {
            obj.lat = d.lat;
        }
        if (d.hasOwnProperty('lon')) {
            obj.lon = d.lon;
        }
        if (d.hasOwnProperty('alt')) {
            obj.alt = d.alt;
        }
        if (d.hasOwnProperty('relative_alt')) {
            obj.relative_alt = d.relative_alt;
        }
        if (d.hasOwnProperty('vx')) {
            obj.vx = d.vx;
        }
        if (d.hasOwnProperty('vy')) {
            obj.vy = d.vy;
        }
        if (d.hasOwnProperty('vz')) {
            obj.vz = d.vz;
        }
        if (d.hasOwnProperty('hdg')) {
            obj.hdg = d.hdg;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoGLOBAL_POSITION_INT }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
