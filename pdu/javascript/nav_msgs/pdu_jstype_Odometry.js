import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Point } from '../geometry_msgs/pdu_jstype_Point.js';
import { Pose } from '../geometry_msgs/pdu_jstype_Pose.js';
import { PoseWithCovariance } from '../geometry_msgs/pdu_jstype_PoseWithCovariance.js';
import { Quaternion } from '../geometry_msgs/pdu_jstype_Quaternion.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';
import { Twist } from '../geometry_msgs/pdu_jstype_Twist.js';
import { TwistWithCovariance } from '../geometry_msgs/pdu_jstype_TwistWithCovariance.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: nav_msgs/Odometry
 * Generated by hakoniwa-ros2pdu.
 */
export class Odometry {
/** @type { Header } */
    header;
/** @type { string } */
    child_frame_id;
/** @type { PoseWithCovariance } */
    pose;
/** @type { TwistWithCovariance } */
    twist;


    constructor() {
        this.header = new Header();
        this.child_frame_id = "";
        this.pose = new PoseWithCovariance();
        this.twist = new TwistWithCovariance();
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'child_frame_id'
            const field_val = this.child_frame_id;
            if (typeof field_val?.toDict === 'function') {
                d['child_frame_id'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['child_frame_id'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['child_frame_id'] = field_val;
            }
        }
        {
            // handle field 'pose'
            const field_val = this.pose;
            if (typeof field_val?.toDict === 'function') {
                d['pose'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['pose'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['pose'] = field_val;
            }
        }
        {
            // handle field 'twist'
            const field_val = this.twist;
            if (typeof field_val?.toDict === 'function') {
                d['twist'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['twist'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['twist'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Odometry }
     */
    static fromDict(d) {
        const obj = new Odometry();
        if (d.hasOwnProperty('header')) {
            const field_class = Header;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('child_frame_id')) {
            obj.child_frame_id = d.child_frame_id;
        }
        if (d.hasOwnProperty('pose')) {
            const field_class = PoseWithCovariance;
            if (d.pose) {
                obj.pose = field_class.fromDict(d.pose);
            }
        }
        if (d.hasOwnProperty('twist')) {
            const field_class = TwistWithCovariance;
            if (d.twist) {
                obj.twist = field_class.fromDict(d.twist);
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Odometry }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
