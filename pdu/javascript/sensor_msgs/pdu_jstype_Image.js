import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';


/**
 * ROS message: sensor_msgs/Image
 * Generated by hakoniwa-ros2pdu.
 */
export class Image {
/** @type { Header } */
    header;
/** @type { number } */
    height;
/** @type { number } */
    width;
/** @type { string } */
    encoding;
/** @type { number } */
    is_bigendian;
/** @type { number } */
    step;
/** @type { Array<number> } */
    data;


    constructor() {
        this.header = new Header();
        this.height = 0;
        this.width = 0;
        this.encoding = "";
        this.is_bigendian = 0;
        this.step = 0;
        this.data = [];
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'height'
            const field_val = this.height;
            if (typeof field_val?.toDict === 'function') {
                d['height'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['height'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['height'] = field_val;
            }
        }
        {
            // handle field 'width'
            const field_val = this.width;
            if (typeof field_val?.toDict === 'function') {
                d['width'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['width'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['width'] = field_val;
            }
        }
        {
            // handle field 'encoding'
            const field_val = this.encoding;
            if (typeof field_val?.toDict === 'function') {
                d['encoding'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['encoding'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['encoding'] = field_val;
            }
        }
        {
            // handle field 'is_bigendian'
            const field_val = this.is_bigendian;
            if (typeof field_val?.toDict === 'function') {
                d['is_bigendian'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['is_bigendian'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['is_bigendian'] = field_val;
            }
        }
        {
            // handle field 'step'
            const field_val = this.step;
            if (typeof field_val?.toDict === 'function') {
                d['step'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['step'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['step'] = field_val;
            }
        }
        {
            // handle field 'data'
            const field_val = this.data;
            if (typeof field_val?.toDict === 'function') {
                d['data'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['data'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['data'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Image }
     */
    static fromDict(d) {
        const obj = new Image();
        if (d.hasOwnProperty('header')) {
            const field_class = Header;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('height')) {
            obj.height = d.height;
        }
        if (d.hasOwnProperty('width')) {
            obj.width = d.width;
        }
        if (d.hasOwnProperty('encoding')) {
            obj.encoding = d.encoding;
        }
        if (d.hasOwnProperty('is_bigendian')) {
            obj.is_bigendian = d.is_bigendian;
        }
        if (d.hasOwnProperty('step')) {
            obj.step = d.step;
        }
        if (d.hasOwnProperty('data')) {
            const item_class = uint8;
            if (Array.isArray(d.data)) {
                obj.data = d.data.map(item => item_class.fromDict(item));
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Image }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
