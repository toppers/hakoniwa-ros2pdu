

/**
 * ROS message: sensor_msgs/RegionOfInterest
 * Generated by hakoniwa-ros2pdu.
 */
export class RegionOfInterest {
/** @type { number } */
    x_offset;
/** @type { number } */
    y_offset;
/** @type { number } */
    height;
/** @type { number } */
    width;
/** @type { boolean } */
    do_rectify;


    constructor() {
        this.x_offset = 0;
        this.y_offset = 0;
        this.height = 0;
        this.width = 0;
        this.do_rectify = false;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'x_offset'
            const field_val = this.x_offset;
            if (typeof field_val?.toDict === 'function') {
                d['x_offset'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['x_offset'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['x_offset'] = field_val;
            }
        }
        {
            // handle field 'y_offset'
            const field_val = this.y_offset;
            if (typeof field_val?.toDict === 'function') {
                d['y_offset'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['y_offset'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['y_offset'] = field_val;
            }
        }
        {
            // handle field 'height'
            const field_val = this.height;
            if (typeof field_val?.toDict === 'function') {
                d['height'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['height'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['height'] = field_val;
            }
        }
        {
            // handle field 'width'
            const field_val = this.width;
            if (typeof field_val?.toDict === 'function') {
                d['width'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['width'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['width'] = field_val;
            }
        }
        {
            // handle field 'do_rectify'
            const field_val = this.do_rectify;
            if (typeof field_val?.toDict === 'function') {
                d['do_rectify'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['do_rectify'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['do_rectify'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { RegionOfInterest }
     */
    static fromDict(d) {
        const obj = new RegionOfInterest();
        if (d.hasOwnProperty('x_offset')) {
            obj.x_offset = d.x_offset;
        }
        if (d.hasOwnProperty('y_offset')) {
            obj.y_offset = d.y_offset;
        }
        if (d.hasOwnProperty('height')) {
            obj.height = d.height;
        }
        if (d.hasOwnProperty('width')) {
            obj.width = d.width;
        }
        if (d.hasOwnProperty('do_rectify')) {
            obj.do_rectify = d.do_rectify;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { RegionOfInterest }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
