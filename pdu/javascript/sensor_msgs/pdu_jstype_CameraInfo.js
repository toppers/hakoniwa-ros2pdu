import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { RegionOfInterest } from '../sensor_msgs/pdu_jstype_RegionOfInterest.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';


/**
 * ROS message: sensor_msgs/CameraInfo
 * Generated by hakoniwa-ros2pdu.
 */
export class CameraInfo {
/** @type { Header } */
    header;
/** @type { number } */
    height;
/** @type { number } */
    width;
/** @type { string } */
    distortion_model;
/** @type { Array<number> } */
    d;
/** @type { Array<number> } */
    k;
/** @type { Array<number> } */
    r;
/** @type { Array<number> } */
    p;
/** @type { number } */
    binning_x;
/** @type { number } */
    binning_y;
/** @type { RegionOfInterest } */
    roi;


    constructor() {
        this.header = new Header();
        this.height = 0;
        this.width = 0;
        this.distortion_model = "";
        this.d = [];
        this.k = [];
        this.r = [];
        this.p = [];
        this.binning_x = 0;
        this.binning_y = 0;
        this.roi = new RegionOfInterest();
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'height'
            const field_val = this.height;
            if (typeof field_val?.toDict === 'function') {
                d['height'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['height'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['height'] = field_val;
            }
        }
        {
            // handle field 'width'
            const field_val = this.width;
            if (typeof field_val?.toDict === 'function') {
                d['width'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['width'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['width'] = field_val;
            }
        }
        {
            // handle field 'distortion_model'
            const field_val = this.distortion_model;
            if (typeof field_val?.toDict === 'function') {
                d['distortion_model'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['distortion_model'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['distortion_model'] = field_val;
            }
        }
        {
            // handle field 'd'
            const field_val = this.d;
            if (typeof field_val?.toDict === 'function') {
                d['d'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['d'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['d'] = field_val;
            }
        }
        {
            // handle field 'k'
            const field_val = this.k;
            if (typeof field_val?.toDict === 'function') {
                d['k'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['k'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['k'] = field_val;
            }
        }
        {
            // handle field 'r'
            const field_val = this.r;
            if (typeof field_val?.toDict === 'function') {
                d['r'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['r'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['r'] = field_val;
            }
        }
        {
            // handle field 'p'
            const field_val = this.p;
            if (typeof field_val?.toDict === 'function') {
                d['p'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['p'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['p'] = field_val;
            }
        }
        {
            // handle field 'binning_x'
            const field_val = this.binning_x;
            if (typeof field_val?.toDict === 'function') {
                d['binning_x'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['binning_x'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['binning_x'] = field_val;
            }
        }
        {
            // handle field 'binning_y'
            const field_val = this.binning_y;
            if (typeof field_val?.toDict === 'function') {
                d['binning_y'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['binning_y'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['binning_y'] = field_val;
            }
        }
        {
            // handle field 'roi'
            const field_val = this.roi;
            if (typeof field_val?.toDict === 'function') {
                d['roi'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['roi'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['roi'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { CameraInfo }
     */
    static fromDict(d) {
        const obj = new CameraInfo();
        if (d.hasOwnProperty('header')) {
            const field_class = Header;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('height')) {
            obj.height = d.height;
        }
        if (d.hasOwnProperty('width')) {
            obj.width = d.width;
        }
        if (d.hasOwnProperty('distortion_model')) {
            obj.distortion_model = d.distortion_model;
        }
        if (d.hasOwnProperty('d')) {
            const item_class = float64;
            if (Array.isArray(d.d)) {
                obj.d = d.d.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('k')) {
            const item_class = float64;
            if (Array.isArray(d.k)) {
                obj.k = d.k.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('r')) {
            const item_class = float64;
            if (Array.isArray(d.r)) {
                obj.r = d.r.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('p')) {
            const item_class = float64;
            if (Array.isArray(d.p)) {
                obj.p = d.p.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('binning_x')) {
            obj.binning_x = d.binning_x;
        }
        if (d.hasOwnProperty('binning_y')) {
            obj.binning_y = d.binning_y;
        }
        if (d.hasOwnProperty('roi')) {
            const field_class = RegionOfInterest;
            if (d.roi) {
                obj.roi = field_class.fromDict(d.roi);
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { CameraInfo }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
