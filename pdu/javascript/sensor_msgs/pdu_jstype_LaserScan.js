import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';


/**
 * ROS message: sensor_msgs/LaserScan
 * Generated by hakoniwa-ros2pdu.
 */
export class LaserScan {
/** @type { Header } */
    header;
/** @type { number } */
    angle_min;
/** @type { number } */
    angle_max;
/** @type { number } */
    angle_increment;
/** @type { number } */
    time_increment;
/** @type { number } */
    scan_time;
/** @type { number } */
    range_min;
/** @type { number } */
    range_max;
/** @type { Array<number> } */
    ranges;
/** @type { Array<number> } */
    intensities;


    constructor() {
        this.header = new Header();
        this.angle_min = 0.0;
        this.angle_max = 0.0;
        this.angle_increment = 0.0;
        this.time_increment = 0.0;
        this.scan_time = 0.0;
        this.range_min = 0.0;
        this.range_max = 0.0;
        this.ranges = [];
        this.intensities = [];
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'angle_min'
            const field_val = this.angle_min;
            if (typeof field_val?.toDict === 'function') {
                d['angle_min'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['angle_min'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['angle_min'] = field_val;
            }
        }
        {
            // handle field 'angle_max'
            const field_val = this.angle_max;
            if (typeof field_val?.toDict === 'function') {
                d['angle_max'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['angle_max'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['angle_max'] = field_val;
            }
        }
        {
            // handle field 'angle_increment'
            const field_val = this.angle_increment;
            if (typeof field_val?.toDict === 'function') {
                d['angle_increment'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['angle_increment'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['angle_increment'] = field_val;
            }
        }
        {
            // handle field 'time_increment'
            const field_val = this.time_increment;
            if (typeof field_val?.toDict === 'function') {
                d['time_increment'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['time_increment'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['time_increment'] = field_val;
            }
        }
        {
            // handle field 'scan_time'
            const field_val = this.scan_time;
            if (typeof field_val?.toDict === 'function') {
                d['scan_time'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['scan_time'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['scan_time'] = field_val;
            }
        }
        {
            // handle field 'range_min'
            const field_val = this.range_min;
            if (typeof field_val?.toDict === 'function') {
                d['range_min'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['range_min'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['range_min'] = field_val;
            }
        }
        {
            // handle field 'range_max'
            const field_val = this.range_max;
            if (typeof field_val?.toDict === 'function') {
                d['range_max'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['range_max'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['range_max'] = field_val;
            }
        }
        {
            // handle field 'ranges'
            const field_val = this.ranges;
            if (typeof field_val?.toDict === 'function') {
                d['ranges'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['ranges'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['ranges'] = field_val;
            }
        }
        {
            // handle field 'intensities'
            const field_val = this.intensities;
            if (typeof field_val?.toDict === 'function') {
                d['intensities'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['intensities'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['intensities'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { LaserScan }
     */
    static fromDict(d) {
        const obj = new LaserScan();
        if (d.hasOwnProperty('header')) {
            const field_class = Header;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('angle_min')) {
            obj.angle_min = d.angle_min;
        }
        if (d.hasOwnProperty('angle_max')) {
            obj.angle_max = d.angle_max;
        }
        if (d.hasOwnProperty('angle_increment')) {
            obj.angle_increment = d.angle_increment;
        }
        if (d.hasOwnProperty('time_increment')) {
            obj.time_increment = d.time_increment;
        }
        if (d.hasOwnProperty('scan_time')) {
            obj.scan_time = d.scan_time;
        }
        if (d.hasOwnProperty('range_min')) {
            obj.range_min = d.range_min;
        }
        if (d.hasOwnProperty('range_max')) {
            obj.range_max = d.range_max;
        }
        if (d.hasOwnProperty('ranges')) {
            const item_class = float32;
            if (Array.isArray(d.ranges)) {
                obj.ranges = d.ranges.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('intensities')) {
            const item_class = float32;
            if (Array.isArray(d.intensities)) {
                obj.intensities = d.intensities.map(item => item_class.fromDict(item));
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { LaserScan }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
