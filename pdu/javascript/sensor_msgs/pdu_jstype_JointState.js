import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';


/**
 * ROS message: sensor_msgs/JointState
 * Generated by hakoniwa-ros2pdu.
 */
export class JointState {
/** @type { Header } */
    header;
/** @type { Array<string> } */
    name;
/** @type { Array<number> } */
    position;
/** @type { Array<number> } */
    velocity;
/** @type { Array<number> } */
    effort;


    constructor() {
        this.header = new Header();
        this.name = [];
        this.position = [];
        this.velocity = [];
        this.effort = [];
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'name'
            const field_val = this.name;
            if (typeof field_val?.toDict === 'function') {
                d['name'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['name'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['name'] = field_val;
            }
        }
        {
            // handle field 'position'
            const field_val = this.position;
            if (typeof field_val?.toDict === 'function') {
                d['position'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['position'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['position'] = field_val;
            }
        }
        {
            // handle field 'velocity'
            const field_val = this.velocity;
            if (typeof field_val?.toDict === 'function') {
                d['velocity'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['velocity'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['velocity'] = field_val;
            }
        }
        {
            // handle field 'effort'
            const field_val = this.effort;
            if (typeof field_val?.toDict === 'function') {
                d['effort'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['effort'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['effort'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { JointState }
     */
    static fromDict(d) {
        const obj = new JointState();
        if (d.hasOwnProperty('header')) {
            const field_class = Header;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('name')) {
            const item_class = string;
            if (Array.isArray(d.name)) {
                obj.name = d.name.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('position')) {
            const item_class = float64;
            if (Array.isArray(d.position)) {
                obj.position = d.position.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('velocity')) {
            const item_class = float64;
            if (Array.isArray(d.velocity)) {
                obj.velocity = d.velocity.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('effort')) {
            const item_class = float64;
            if (Array.isArray(d.effort)) {
                obj.effort = d.effort.map(item => item_class.fromDict(item));
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { JointState }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
