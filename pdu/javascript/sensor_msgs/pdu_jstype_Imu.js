import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Quaternion } from '../geometry_msgs/pdu_jstype_Quaternion.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: sensor_msgs/Imu
 * Generated by hakoniwa-ros2pdu.
 */
export class Imu {
/** @type { Header } */
    header;
/** @type { Quaternion } */
    orientation;
/** @type { Array<number> } */
    orientation_covariance;
/** @type { Vector3 } */
    angular_velocity;
/** @type { Array<number> } */
    angular_velocity_covariance;
/** @type { Vector3 } */
    linear_acceleration;
/** @type { Array<number> } */
    linear_acceleration_covariance;


    constructor() {
        this.header = new Header();
        this.orientation = new Quaternion();
        this.orientation_covariance = [];
        this.angular_velocity = new Vector3();
        this.angular_velocity_covariance = [];
        this.linear_acceleration = new Vector3();
        this.linear_acceleration_covariance = [];
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'orientation'
            const field_val = this.orientation;
            if (typeof field_val?.toDict === 'function') {
                d['orientation'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['orientation'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['orientation'] = field_val;
            }
        }
        {
            // handle field 'orientation_covariance'
            const field_val = this.orientation_covariance;
            if (typeof field_val?.toDict === 'function') {
                d['orientation_covariance'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['orientation_covariance'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['orientation_covariance'] = field_val;
            }
        }
        {
            // handle field 'angular_velocity'
            const field_val = this.angular_velocity;
            if (typeof field_val?.toDict === 'function') {
                d['angular_velocity'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['angular_velocity'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['angular_velocity'] = field_val;
            }
        }
        {
            // handle field 'angular_velocity_covariance'
            const field_val = this.angular_velocity_covariance;
            if (typeof field_val?.toDict === 'function') {
                d['angular_velocity_covariance'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['angular_velocity_covariance'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['angular_velocity_covariance'] = field_val;
            }
        }
        {
            // handle field 'linear_acceleration'
            const field_val = this.linear_acceleration;
            if (typeof field_val?.toDict === 'function') {
                d['linear_acceleration'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['linear_acceleration'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['linear_acceleration'] = field_val;
            }
        }
        {
            // handle field 'linear_acceleration_covariance'
            const field_val = this.linear_acceleration_covariance;
            if (typeof field_val?.toDict === 'function') {
                d['linear_acceleration_covariance'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['linear_acceleration_covariance'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['linear_acceleration_covariance'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { Imu }
     */
    static fromDict(d) {
        const obj = new Imu();
        if (d.hasOwnProperty('header')) {
            const field_class = Header;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('orientation')) {
            const field_class = Quaternion;
            if (d.orientation) {
                obj.orientation = field_class.fromDict(d.orientation);
            }
        }
        if (d.hasOwnProperty('orientation_covariance')) {
            const item_class = float64;
            if (Array.isArray(d.orientation_covariance)) {
                obj.orientation_covariance = d.orientation_covariance.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('angular_velocity')) {
            const field_class = Vector3;
            if (d.angular_velocity) {
                obj.angular_velocity = field_class.fromDict(d.angular_velocity);
            }
        }
        if (d.hasOwnProperty('angular_velocity_covariance')) {
            const item_class = float64;
            if (Array.isArray(d.angular_velocity_covariance)) {
                obj.angular_velocity_covariance = d.angular_velocity_covariance.map(item => item_class.fromDict(item));
            }
        }
        if (d.hasOwnProperty('linear_acceleration')) {
            const field_class = Vector3;
            if (d.linear_acceleration) {
                obj.linear_acceleration = field_class.fromDict(d.linear_acceleration);
            }
        }
        if (d.hasOwnProperty('linear_acceleration_covariance')) {
            const item_class = float64;
            if (Array.isArray(d.linear_acceleration_covariance)) {
                obj.linear_acceleration_covariance = d.linear_acceleration_covariance.map(item => item_class.fromDict(item));
            }
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { Imu }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
