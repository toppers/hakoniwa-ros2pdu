

/**
 * ROS message: sensor_msgs/PointField
 * Generated by hakoniwa-ros2pdu.
 */
export class PointField {
/** @type { string } */
    name;
/** @type { number } */
    offset;
/** @type { number } */
    datatype;
/** @type { number } */
    count;


    constructor() {
        this.name = "";
        this.offset = 0;
        this.datatype = 0;
        this.count = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'name'
            const field_val = this.name;
            if (typeof field_val?.toDict === 'function') {
                d['name'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['name'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['name'] = field_val;
            }
        }
        {
            // handle field 'offset'
            const field_val = this.offset;
            if (typeof field_val?.toDict === 'function') {
                d['offset'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['offset'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['offset'] = field_val;
            }
        }
        {
            // handle field 'datatype'
            const field_val = this.datatype;
            if (typeof field_val?.toDict === 'function') {
                d['datatype'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['datatype'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['datatype'] = field_val;
            }
        }
        {
            // handle field 'count'
            const field_val = this.count;
            if (typeof field_val?.toDict === 'function') {
                d['count'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['count'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['count'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { PointField }
     */
    static fromDict(d) {
        const obj = new PointField();
        if (d.hasOwnProperty('name')) {
            obj.name = d.name;
        }
        if (d.hasOwnProperty('offset')) {
            obj.offset = d.offset;
        }
        if (d.hasOwnProperty('datatype')) {
            obj.datatype = d.datatype;
        }
        if (d.hasOwnProperty('count')) {
            obj.count = d.count;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { PointField }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
