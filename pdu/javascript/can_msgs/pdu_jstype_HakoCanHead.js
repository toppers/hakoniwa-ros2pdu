

/**
 * ROS message: can_msgs/HakoCanHead
 * Generated by hakoniwa-ros2pdu.
 */
export class HakoCanHead {
/** @type { number } */
    channel;
/** @type { number } */
    ide;
/** @type { number } */
    rtr;
/** @type { number } */
    dlc;
/** @type { number } */
    canid;


    constructor() {
        this.channel = 0;
        this.ide = 0;
        this.rtr = 0;
        this.dlc = 0;
        this.canid = 0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'channel'
            const field_val = this.channel;
            if (typeof field_val?.toDict === 'function') {
                d['channel'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['channel'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['channel'] = field_val;
            }
        }
        {
            // handle field 'ide'
            const field_val = this.ide;
            if (typeof field_val?.toDict === 'function') {
                d['ide'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['ide'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['ide'] = field_val;
            }
        }
        {
            // handle field 'rtr'
            const field_val = this.rtr;
            if (typeof field_val?.toDict === 'function') {
                d['rtr'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['rtr'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['rtr'] = field_val;
            }
        }
        {
            // handle field 'dlc'
            const field_val = this.dlc;
            if (typeof field_val?.toDict === 'function') {
                d['dlc'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['dlc'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['dlc'] = field_val;
            }
        }
        {
            // handle field 'canid'
            const field_val = this.canid;
            if (typeof field_val?.toDict === 'function') {
                d['canid'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['canid'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['canid'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { HakoCanHead }
     */
    static fromDict(d) {
        const obj = new HakoCanHead();
        if (d.hasOwnProperty('channel')) {
            obj.channel = d.channel;
        }
        if (d.hasOwnProperty('ide')) {
            obj.ide = d.ide;
        }
        if (d.hasOwnProperty('rtr')) {
            obj.rtr = d.rtr;
        }
        if (d.hasOwnProperty('dlc')) {
            obj.dlc = d.dlc;
        }
        if (d.hasOwnProperty('canid')) {
            obj.canid = d.canid;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { HakoCanHead }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
