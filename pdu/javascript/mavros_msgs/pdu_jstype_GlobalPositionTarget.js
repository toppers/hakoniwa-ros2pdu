import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: mavros_msgs/GlobalPositionTarget
 * Generated by hakoniwa-ros2pdu.
 */
export class GlobalPositionTarget {
/** @type { Header } */
    header;
/** @type { number } */
    coordinate_frame;
/** @type { number } */
    type_mask;
/** @type { number } */
    latitude;
/** @type { number } */
    longitude;
/** @type { number } */
    altitude;
/** @type { Vector3 } */
    velocity;
/** @type { Vector3 } */
    acceleration_or_force;
/** @type { number } */
    yaw;
/** @type { number } */
    yaw_rate;


    constructor() {
        this.header = null;
        this.coordinate_frame = 0;
        this.type_mask = 0;
        this.latitude = 0.0;
        this.longitude = 0.0;
        this.altitude = 0.0;
        this.velocity = null;
        this.acceleration_or_force = null;
        this.yaw = 0.0;
        this.yaw_rate = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'coordinate_frame'
            const field_val = this.coordinate_frame;
            if (typeof field_val?.toDict === 'function') {
                d['coordinate_frame'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['coordinate_frame'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['coordinate_frame'] = field_val;
            }
        }
        {
            // handle field 'type_mask'
            const field_val = this.type_mask;
            if (typeof field_val?.toDict === 'function') {
                d['type_mask'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['type_mask'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['type_mask'] = field_val;
            }
        }
        {
            // handle field 'latitude'
            const field_val = this.latitude;
            if (typeof field_val?.toDict === 'function') {
                d['latitude'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['latitude'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['latitude'] = field_val;
            }
        }
        {
            // handle field 'longitude'
            const field_val = this.longitude;
            if (typeof field_val?.toDict === 'function') {
                d['longitude'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['longitude'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['longitude'] = field_val;
            }
        }
        {
            // handle field 'altitude'
            const field_val = this.altitude;
            if (typeof field_val?.toDict === 'function') {
                d['altitude'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['altitude'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['altitude'] = field_val;
            }
        }
        {
            // handle field 'velocity'
            const field_val = this.velocity;
            if (typeof field_val?.toDict === 'function') {
                d['velocity'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['velocity'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['velocity'] = field_val;
            }
        }
        {
            // handle field 'acceleration_or_force'
            const field_val = this.acceleration_or_force;
            if (typeof field_val?.toDict === 'function') {
                d['acceleration_or_force'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['acceleration_or_force'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['acceleration_or_force'] = field_val;
            }
        }
        {
            // handle field 'yaw'
            const field_val = this.yaw;
            if (typeof field_val?.toDict === 'function') {
                d['yaw'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yaw'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yaw'] = field_val;
            }
        }
        {
            // handle field 'yaw_rate'
            const field_val = this.yaw_rate;
            if (typeof field_val?.toDict === 'function') {
                d['yaw_rate'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['yaw_rate'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['yaw_rate'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { GlobalPositionTarget }
     */
    static fromDict(d) {
        const obj = new GlobalPositionTarget();
        if (d.hasOwnProperty('header')) {
            const field_class = Header;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('coordinate_frame')) {
            obj.coordinate_frame = d.coordinate_frame;
        }
        if (d.hasOwnProperty('type_mask')) {
            obj.type_mask = d.type_mask;
        }
        if (d.hasOwnProperty('latitude')) {
            obj.latitude = d.latitude;
        }
        if (d.hasOwnProperty('longitude')) {
            obj.longitude = d.longitude;
        }
        if (d.hasOwnProperty('altitude')) {
            obj.altitude = d.altitude;
        }
        if (d.hasOwnProperty('velocity')) {
            const field_class = Vector3;
            if (d.velocity) {
                obj.velocity = field_class.fromDict(d.velocity);
            }
        }
        if (d.hasOwnProperty('acceleration_or_force')) {
            const field_class = Vector3;
            if (d.acceleration_or_force) {
                obj.acceleration_or_force = field_class.fromDict(d.acceleration_or_force);
            }
        }
        if (d.hasOwnProperty('yaw')) {
            obj.yaw = d.yaw;
        }
        if (d.hasOwnProperty('yaw_rate')) {
            obj.yaw_rate = d.yaw_rate;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { GlobalPositionTarget }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
