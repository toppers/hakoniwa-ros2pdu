import { Header } from '../std_msgs/pdu_jstype_Header.js';
import { Quaternion } from '../geometry_msgs/pdu_jstype_Quaternion.js';
import { Time } from '../builtin_interfaces/pdu_jstype_Time.js';
import { Vector3 } from '../geometry_msgs/pdu_jstype_Vector3.js';


/**
 * ROS message: mavros_msgs/AttitudeTarget
 * Generated by hakoniwa-ros2pdu.
 */
export class AttitudeTarget {
/** @type { Header } */
    header;
/** @type { number } */
    type_mask;
/** @type { Quaternion } */
    orientation;
/** @type { Vector3 } */
    body_rate;
/** @type { number } */
    thrust;


    constructor() {
        this.header = new Header();
        this.type_mask = 0;
        this.orientation = new Quaternion();
        this.body_rate = new Vector3();
        this.thrust = 0.0;
    }

    /**
     * @returns {object}
     */
    toDict() {
        const d = {};
        {
            // handle field 'header'
            const field_val = this.header;
            if (typeof field_val?.toDict === 'function') {
                d['header'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['header'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['header'] = field_val;
            }
        }
        {
            // handle field 'type_mask'
            const field_val = this.type_mask;
            if (typeof field_val?.toDict === 'function') {
                d['type_mask'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['type_mask'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['type_mask'] = field_val;
            }
        }
        {
            // handle field 'orientation'
            const field_val = this.orientation;
            if (typeof field_val?.toDict === 'function') {
                d['orientation'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['orientation'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['orientation'] = field_val;
            }
        }
        {
            // handle field 'body_rate'
            const field_val = this.body_rate;
            if (typeof field_val?.toDict === 'function') {
                d['body_rate'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['body_rate'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['body_rate'] = field_val;
            }
        }
        {
            // handle field 'thrust'
            const field_val = this.thrust;
            if (typeof field_val?.toDict === 'function') {
                d['thrust'] = field_val.toDict();
            } else if (Array.isArray(field_val)) {
                d['thrust'] = field_val.map(item => typeof item?.toDict === 'function' ? item.toDict() : item);
            } else {
                d['thrust'] = field_val;
            }
        }
        return d;
    }

    /**
     * @param {object} d
     * @returns { AttitudeTarget }
     */
    static fromDict(d) {
        const obj = new AttitudeTarget();
        if (d.hasOwnProperty('header')) {
            const field_class = Header;
            if (d.header) {
                obj.header = field_class.fromDict(d.header);
            }
        }
        if (d.hasOwnProperty('type_mask')) {
            obj.type_mask = d.type_mask;
        }
        if (d.hasOwnProperty('orientation')) {
            const field_class = Quaternion;
            if (d.orientation) {
                obj.orientation = field_class.fromDict(d.orientation);
            }
        }
        if (d.hasOwnProperty('body_rate')) {
            const field_class = Vector3;
            if (d.body_rate) {
                obj.body_rate = field_class.fromDict(d.body_rate);
            }
        }
        if (d.hasOwnProperty('thrust')) {
            obj.thrust = d.thrust;
        }
        return obj;
    }

    /**
     * @returns {string}
     */
    toJSON(indent = 2) {
        return JSON.stringify(this.toDict(), null, indent);
    }

    /**
     * @param {string} json_str
     * @returns { AttitudeTarget }
     */
    static fromJSON(json_str) {
        return this.fromDict(JSON.parse(json_str));
    }
}
